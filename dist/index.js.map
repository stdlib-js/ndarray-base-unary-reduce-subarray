{
  "version": 3,
  "sources": ["../lib/initialize_array_views.js", "../lib/increment_offsets.js", "../lib/set_view_offsets.js", "../lib/offsets.js", "../lib/2d_blocked_accessors.js", "../lib/2d_blocked.js", "../lib/0d_accessors.js", "../lib/1d_accessors.js", "../lib/nd_accessors.js", "../lib/0d.js", "../lib/1d.js", "../lib/2d.js", "../lib/3d.js", "../lib/nd.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = initializeViews;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrementOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setViewOffsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = offsets;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, [ 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar loopOrder = require( '@stdlib/ndarray-base-unary-loop-interchange-order' );\nvar blockSize = require( '@stdlib/ndarray-base-unary-tiling-block-size' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, [ 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = blockedunary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 1 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], {} );\n*\n* var v = y.data.get( 0 );\n* // returns true\n*/\nfunction unary0d( fcn, arrays, opts ) {\n\tvar y = arrays[ 1 ];\n\ty.accessors[ 1 ]( y.data, y.offset, fcn( without( arrays, 1 ), opts ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, [ 4 ], [ 2, 3 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, strides, dims, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var accessors = require( '@stdlib/array-base-accessors' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tset( ybuf, io[1], fcn( views, opts ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar without = require( '@stdlib/array-base-without' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 1 );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], {} );\n*\n* var v = y.data;\n* // returns [ true ]\n*/\nfunction unary0d( fcn, arrays, opts ) {\n\tarrays[1].data[ arrays[1].offset ] = fcn( without( arrays, 1 ), opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary0d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary1d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, [ 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary2d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRowMajor = require( '@stdlib/ndarray-base-assert-is-row-major-string' );\nvar incrementOffsets = require( './increment_offsets.js' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, [ 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor( y.order ) ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unary3d;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar setViewOffsets = require( './set_view_offsets.js' );\nvar offsets = require( './offsets.js' );\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tybuf[ io[1] ] = fcn( views, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = unarynd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray2object = require( '@stdlib/ndarray-base-ndarraylike2object' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed2 = require( '@stdlib/array-base-take-indexed2' );\nvar iterationOrder = require( '@stdlib/ndarray-base-iteration-order' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar join = require( '@stdlib/array-base-join' );\nvar format = require( '@stdlib/string-format' );\nvar initializeViews = require( './initialize_array_views.js' );\nvar blockedaccessorunary2d = require( './2d_blocked_accessors.js' );\nvar blockedunary2d = require( './2d_blocked.js' );\nvar accessorunary0d = require( './0d_accessors.js' );\nvar accessorunary1d = require( './1d_accessors.js' );\nvar accessorunarynd = require( './nd_accessors.js' );\nvar unary0d = require( './0d.js' );\nvar unary1d = require( './1d.js' );\nvar unary2d = require( './2d.js' );\nvar unary3d = require( './3d.js' );\nvar unarynd = require( './nd.js' );\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tnull, // unary4d,\n\tnull, // unary5d,\n\tnull, // unary6d,\n\tnull, // unary7d,\n\tnull, // unary8d,\n\tnull, // unary9d,\n\tnull  // unary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\tnull, // accessorunary2d,\n\tnull, // accessorunary3d,\n\tnull, // accessorunary4d,\n\tnull, // accessorunary5d,\n\tnull, // accessorunary6d,\n\tnull, // accessorunary7d,\n\tnull, // accessorunary8d,\n\tnull, // accessorunary9d,\n\tnull  // accessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tnull, // blockedunary3d,\n\tnull, // blockedunary4d,\n\tnull, // blockedunary5d,\n\tnull, // blockedunary6d,\n\tnull, // blockedunary7d,\n\tnull, // blockedunary8d,\n\tnull, // blockedunary9d,\n\tnull  // blockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tnull, // blockedaccessorunary3d,\n\tnull, // blockedaccessorunary4d,\n\tnull, // blockedaccessorunary5d,\n\tnull, // blockedaccessorunary6d,\n\tnull, // blockedaccessorunary7d,\n\tnull, // blockedaccessorunary8d,\n\tnull, // blockedaccessorunary9d,\n\tnull  // blockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var every = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var every = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = [ false ];\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [ 0, 1, 2, 3 ] );\n*\n* var v = y.data;\n* // returns [ true ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var every = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 12 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, true ], [ true, true ] ], [ [ true, false ], [ true, true ] ], [ [ true, true ], [ true, true ] ] ]\n*/\nfunction unaryReduceSubarray( fcn, arrays, dims, options ) { // eslint-disable-line max-statements\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, opts );\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, opts );\n\t}\n\tsy = y.strides;\n\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ty.shape = [ shl[i] ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tsl = [ sl[i] ];\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn UNARY[ 1 ]( fcn, arr, views, sl, opts );\n\t}\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tif ( iox !== 0 && ioy !== 0 && iox === ioy && K <= MAX_DIMS ) {\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides), we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, opts );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, sl, opts );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, views, sl, opts );\n\t}\n\tunarynd( fcn, arr, views, sl, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unaryReduceSubarray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar reduce = require( './main.js' );\n\n\n// MAIN //\n\n/**\n* Return a function for performing a reduction over a list of specified dimensions in an input ndarray and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var every = factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* every( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options ) {\n\t\tvar opts;\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-subarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var every = require( '@stdlib/ndarray-base-every' );\n* var unaryReduceSubarray = require( '@stdlib/ndarray-base-unary-reduce-subarray' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var filled = require( '@stdlib/array-base-filled' );\n* var ndarray2array = require( '@stdlib/ndarray-base-to-array' );\n* var base = require( '@stdlib/ndarray-base-every' );\n* var unaryReduceSubarray = require( '@stdlib/ndarray-base-unary-reduce-subarray' );\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var every = unaryReduceSubarray.factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* every( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],
  "mappings": "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",
  "names": ["require_initialize_array_views", "__commonJSMin", "exports", "module", "initializeViews", "arrays", "out", "v", "i", "require_increment_offsets", "__commonJSMin", "exports", "module", "incrementOffsets", "offsets", "inc", "i", "require_set_view_offsets", "__commonJSMin", "exports", "module", "setViewOffsets", "views", "offsets", "i", "j", "require_offsets", "__commonJSMin", "exports", "module", "offsets", "arrays", "out", "i", "require_d_blocked_accessors", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary2d", "fcn", "arrays", "views", "strides", "opts", "bsize", "ybuf", "set", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "o", "k", "require_d_blocked", "__commonJSMin", "exports", "module", "loopOrder", "blockSize", "takeIndexed", "zeros", "incrementOffsets", "setViewOffsets", "offsets", "blockedunary2d", "fcn", "arrays", "views", "strides", "opts", "bsize", "ybuf", "dv0", "dv1", "ov1", "sh", "s0", "s1", "sv", "ov", "iv", "i0", "i1", "j0", "j1", "N", "x", "y", "o", "k", "require_d_accessors", "__commonJSMin", "exports", "module", "without", "unary0d", "fcn", "arrays", "opts", "y", "require_d_accessors", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "unary1d", "fcn", "arrays", "views", "strides", "dims", "opts", "ybuf", "set", "dv0", "sh", "S0", "iv", "i0", "y", "i", "require_nd_accessors", "__commonJSMin", "exports", "module", "numel", "vind2bind", "zeros", "setViewOffsets", "offsets", "MODE", "unarynd", "fcn", "arrays", "views", "strides", "opts", "ybuf", "len", "set", "sh", "iv", "io", "N", "v", "y", "i", "j", "require_d", "__commonJSMin", "exports", "module", "without", "unary0d", "fcn", "arrays", "opts", "require_d", "__commonJSMin", "exports", "module", "incrementOffsets", "setViewOffsets", "offsets", "unary1d", "fcn", "arrays", "views", "strides", "opts", "ybuf", "dv0", "sh", "S0", "iv", "i0", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary2d", "fcn", "arrays", "views", "strides", "opts", "ybuf", "dv0", "dv1", "sh", "S0", "S1", "sv", "iv", "i0", "i1", "y", "i", "require_d", "__commonJSMin", "exports", "module", "isRowMajor", "incrementOffsets", "setViewOffsets", "offsets", "unary3d", "fcn", "arrays", "views", "strides", "opts", "ybuf", "dv0", "dv1", "dv2", "sh", "S0", "S1", "S2", "sv", "iv", "i0", "i1", "i2", "y", "i", "require_nd", "__commonJSMin", "exports", "module", "numel", "vind2bind", "zeros", "setViewOffsets", "offsets", "MODE", "unarynd", "fcn", "arrays", "views", "strides", "opts", "ybuf", "len", "sh", "iv", "io", "N", "v", "y", "i", "j", "require_main", "__commonJSMin", "exports", "module", "ndarray2object", "normalizeIndices", "indicesComplement", "takeIndexed2", "iterationOrder", "numel", "join", "format", "initializeViews", "blockedaccessorunary2d", "blockedunary2d", "accessorunary0d", "accessorunary1d", "accessorunarynd", "unary0d", "unary1d", "unary2d", "unary3d", "unarynd", "UNARY", "ACCESSOR_UNARY", "BLOCKED_UNARY", "BLOCKED_ACCESSOR_UNARY", "MAX_DIMS", "unaryReduceSubarray", "fcn", "arrays", "dims", "options", "views", "ndims", "ldims", "opts", "arr", "tmp", "len", "shx", "shc", "shl", "iox", "ioy", "sc", "sl", "sy", "ns", "d", "s", "N", "M", "K", "x", "y", "i", "j", "require_factory", "__commonJSMin", "exports", "module", "isFunction", "format", "reduce", "factory", "fcn", "reducer", "arrays", "dims", "options", "opts", "setReadOnly", "main", "factory"]
}
