{"version":3,"file":"index.mjs","sources":["../lib/increment_offsets.js","../lib/set_view_offsets.js","../lib/offsets.js","../lib/nd_accessors.js","../lib/nd.js","../lib/main.js","../lib/0d.js","../lib/1d.js","../lib/2d.js","../lib/3d.js","../lib/4d.js","../lib/5d.js","../lib/6d.js","../lib/7d.js","../lib/8d.js","../lib/9d.js","../lib/10d.js","../lib/0d_accessors.js","../lib/1d_accessors.js","../lib/2d_accessors.js","../lib/3d_accessors.js","../lib/4d_accessors.js","../lib/5d_accessors.js","../lib/6d_accessors.js","../lib/7d_accessors.js","../lib/8d_accessors.js","../lib/9d_accessors.js","../lib/10d_accessors.js","../lib/2d_blocked.js","../lib/3d_blocked.js","../lib/4d_blocked.js","../lib/5d_blocked.js","../lib/6d_blocked.js","../lib/7d_blocked.js","../lib/8d_blocked.js","../lib/9d_blocked.js","../lib/10d_blocked.js","../lib/2d_blocked_accessors.js","../lib/3d_blocked_accessors.js","../lib/4d_blocked_accessors.js","../lib/5d_blocked_accessors.js","../lib/6d_blocked_accessors.js","../lib/7d_blocked_accessors.js","../lib/8d_blocked_accessors.js","../lib/9d_blocked_accessors.js","../lib/10d_blocked_accessors.js","../lib/initialize_array_views.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Increments index offsets according to a list of increments.\n*\n* ## Notes\n*\n* -   This function mutates the list of index offsets.\n*\n* @private\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @param {NonNegativeIntegerArray} inc - list of increments\n* @returns {NonNegativeIntegerArray} updated offsets\n*/\nfunction incrementOffsets( offsets, inc ) {\n\tvar i;\n\tfor ( i = 0; i < offsets.length; i++ ) {\n\t\toffsets[ i ] += inc[ i ];\n\t}\n\treturn offsets;\n}\n\n\n// EXPORTS //\n\nexport default incrementOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets view offsets according to a list of index offsets.\n*\n* ## Notes\n*\n* -   This function skips the second element in the list of index offsets, as that is assumed to correspond to the output ndarray which does not have a corresponding view. Meaning, the list of views is expected to have `N` elements, and the list of index offsets is expected to have `N+1` elements.\n* -   This function mutates the provides view objects.\n*\n* @private\n* @param {Array<Object>} views - list of ndarray-like objects representing ndarray views\n* @param {NonNegativeIntegerArray} offsets - list of index offsets\n* @returns {Array<Object>} updated views\n*/\nfunction setViewOffsets( views, offsets ) {\n\tvar i;\n\tvar j;\n\tfor ( i = 0, j = 0; i < offsets.length; i++ ) {\n\t\tif ( i === 1 ) { // note: expected to correspond to the output ndarray which does not have a corresponding view\n\t\t\tcontinue;\n\t\t}\n\t\tviews[ j ].offset = offsets[ i ];\n\t\tj += 1;\n\t}\n\treturn views;\n}\n\n\n// EXPORTS //\n\nexport default setViewOffsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves index offsets from a list of ndarray-like objects.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @returns {NonNegativeIntegerArray} list of offsets\n*/\nfunction offsets( arrays ) {\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < arrays.length; i++ ) {\n\t\tout.push( arrays[ i ].offset );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default offsets;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar set;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tset( ybuf, io[1], fcn( views, opts ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport numel from '@stdlib/ndarray-base-numel';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport zeros from '@stdlib/array-base-zeros';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// VARIABLES //\n\nvar MODE = 'throw';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unarynd( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unarynd( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar len;\n\tvar sh;\n\tvar iv;\n\tvar io;\n\tvar N;\n\tvar v;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tN = arrays.length;\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Compute the total number of elements over which to iterate:\n\tlen = numel( sh );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate based on the linear **view** index, regardless as to how the data is stored in memory...\n\tio = zeros( N );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = arrays[ j ];\n\t\t\tio[ j ] = vind2bind( sh, v.strides, iv[ j ], v.order, i, MODE );\n\t\t}\n\t\tsetViewOffsets( views, io );\n\t\tybuf[ io[1] ] = fcn( views, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unarynd;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ndarray2object from '@stdlib/ndarray-base-ndarraylike2object';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed2 from '@stdlib/array-base-take-indexed2';\nimport iterationOrder from '@stdlib/ndarray-base-iteration-order';\nimport strides2order from '@stdlib/ndarray-base-strides2order';\nimport numel from '@stdlib/ndarray-base-numel';\nimport join from '@stdlib/array-base-join';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport initializeViews from './initialize_array_views.js';\nimport blockedaccessorunary2d from './2d_blocked_accessors.js';\nimport blockedaccessorunary3d from './3d_blocked_accessors.js';\nimport blockedaccessorunary4d from './4d_blocked_accessors.js';\nimport blockedaccessorunary5d from './5d_blocked_accessors.js';\nimport blockedaccessorunary6d from './6d_blocked_accessors.js';\nimport blockedaccessorunary7d from './7d_blocked_accessors.js';\nimport blockedaccessorunary8d from './8d_blocked_accessors.js';\nimport blockedaccessorunary9d from './9d_blocked_accessors.js';\nimport blockedaccessorunary10d from './10d_blocked_accessors.js';\nimport blockedunary2d from './2d_blocked.js';\nimport blockedunary3d from './3d_blocked.js';\nimport blockedunary4d from './4d_blocked.js';\nimport blockedunary5d from './5d_blocked.js';\nimport blockedunary6d from './6d_blocked.js';\nimport blockedunary7d from './7d_blocked.js';\nimport blockedunary8d from './8d_blocked.js';\nimport blockedunary9d from './9d_blocked.js';\nimport blockedunary10d from './10d_blocked.js';\nimport accessorunary0d from './0d_accessors.js';\nimport accessorunary1d from './1d_accessors.js';\nimport accessorunary2d from './2d_accessors.js';\nimport accessorunary3d from './3d_accessors.js';\nimport accessorunary4d from './4d_accessors.js';\nimport accessorunary5d from './5d_accessors.js';\nimport accessorunary6d from './6d_accessors.js';\nimport accessorunary7d from './7d_accessors.js';\nimport accessorunary8d from './8d_accessors.js';\nimport accessorunary9d from './9d_accessors.js';\nimport accessorunary10d from './10d_accessors.js';\nimport accessorunarynd from './nd_accessors.js';\nimport unary0d from './0d.js';\nimport unary1d from './1d.js';\nimport unary2d from './2d.js';\nimport unary3d from './3d.js';\nimport unary4d from './4d.js';\nimport unary5d from './5d.js';\nimport unary6d from './6d.js';\nimport unary7d from './7d.js';\nimport unary8d from './8d.js';\nimport unary9d from './9d.js';\nimport unary10d from './10d.js';\nimport unarynd from './nd.js';\n\n\n// VARIABLES //\n\nvar UNARY = [\n\tunary0d,\n\tunary1d,\n\tunary2d,\n\tunary3d,\n\tunary4d,\n\tunary5d,\n\tunary6d,\n\tunary7d,\n\tunary8d,\n\tunary9d,\n\tunary10d\n];\nvar ACCESSOR_UNARY = [\n\taccessorunary0d,\n\taccessorunary1d,\n\taccessorunary2d,\n\taccessorunary3d,\n\taccessorunary4d,\n\taccessorunary5d,\n\taccessorunary6d,\n\taccessorunary7d,\n\taccessorunary8d,\n\taccessorunary9d,\n\taccessorunary10d\n];\nvar BLOCKED_UNARY = [\n\tblockedunary2d, // 0\n\tblockedunary3d,\n\tblockedunary4d,\n\tblockedunary5d,\n\tblockedunary6d,\n\tblockedunary7d,\n\tblockedunary8d,\n\tblockedunary9d,\n\tblockedunary10d // 8\n];\nvar BLOCKED_ACCESSOR_UNARY = [\n\tblockedaccessorunary2d, // 0\n\tblockedaccessorunary3d,\n\tblockedaccessorunary4d,\n\tblockedaccessorunary5d,\n\tblockedaccessorunary6d,\n\tblockedaccessorunary7d,\n\tblockedaccessorunary8d,\n\tblockedaccessorunary9d,\n\tblockedaccessorunary10d // 8\n];\nvar MAX_DIMS = UNARY.length - 1;\n\n\n// MAIN //\n\n/**\n* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n* @param {Options} [options] - function options\n* @throws {Error} arrays must have the expected number of dimensions\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide unique dimension indices\n* @throws {Error} arrays must have the same loop dimension sizes\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import every from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import every from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = [ false ];\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [ 0, 1, 2, 3 ] );\n*\n* var v = y.data;\n* // returns [ true ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import every from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 12 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3, 2, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 4, 2, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, true ], [ true, true ] ], [ [ true, false ], [ true, true ] ], [ [ true, true ], [ true, true ] ] ]\n*/\nfunction unaryReduceSubarray( fcn, arrays, dims, options ) { // eslint-disable-line max-statements\n\tvar views;\n\tvar ndims;\n\tvar ldims;\n\tvar opts;\n\tvar arr;\n\tvar tmp;\n\tvar len;\n\tvar shx;\n\tvar shc;\n\tvar shl;\n\tvar iox;\n\tvar ioy;\n\tvar ord;\n\tvar sc;\n\tvar sl;\n\tvar sy;\n\tvar ns;\n\tvar d;\n\tvar s;\n\tvar N;\n\tvar M;\n\tvar K;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar j;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Standardize ndarray meta data...\n\tN = arrays.length;\n\tarr = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tarr.push( ndarray2object( arrays[ i ] ) );\n\t}\n\t// Cache references to the input and output arrays:\n\tx = arr[ 0 ];\n\ty = arr[ 1 ];\n\n\t// Resolve the number of input array dimensions:\n\tshx = x.shape;\n\tndims = shx.length;\n\n\t// Verify that we've been provided a list of unique dimension indices...\n\tM = dims.length;\n\td = normalizeIndices( dims, ndims-1 );\n\tif ( d === null ) {\n\t\tthrow new RangeError( format( 'invalid argument. Third argument contains an out-of-bounds dimension index. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\td.sort();\n\tif ( d.length !== M ) {\n\t\tthrow new Error( format( 'invalid argument. Third argument must contain a list of unique dimension indices. Value: [%s].', join( dims, ',' ) ) );\n\t}\n\t// Check whether we've been provided a valid number of dimensions to reduce...\n\tif ( M > ndims ) {\n\t\tthrow new RangeError( format( 'invalid argument. Number of specified dimensions cannot exceed the number of dimensions in the input array. Number of dimensions: %d. Value: [%s].', ndims, join( dims, ',' ) ) );\n\t}\n\t// Verify that provided ndarrays have the expected number of dimensions...\n\tK = ndims - M;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tif ( arr[ i ].shape.length !== K ) {\n\t\t\tthrow new Error( format( 'invalid argument. Arrays which are not being reduced must have the same number of non-reduced dimensions. Input array shape: [%s]. Number of non-reduced dimensions: %d. Array shape: [%s] (index: %d).', join( shx, ',' ), K, join( arr[ i ].shape, ',' ), i ) );\n\t\t}\n\t}\n\t// Determine whether we can avoid iteration altogether...\n\tif ( K === 0 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, opts );\n\t}\n\t// Resolve the non-reduced (\"loop\") dimensions and associated strides:\n\tldims = indicesComplement( shx.length, d );\n\ttmp = takeIndexed2( shx, x.strides, ldims );\n\tshl = tmp[ 0 ];\n\tsl = tmp[ 1 ];\n\n\t// Resolve the reduced (\"core\") dimensions and associated strides:\n\ttmp = takeIndexed2( shx, x.strides, d );\n\tshc = tmp[ 0 ];\n\tsc = tmp[ 1 ];\n\n\t// Verify that the provided arrays have the same loop dimensions...\n\tlen = 1; // number of elements\n\tns = 0;  // number of singleton dimensions\n\tfor ( i = 0; i < K; i++ ) {\n\t\ts = shl[ i ];\n\t\tfor ( j = 1; j < N; j++ ) {\n\t\t\tif ( s !== arr[ j ].shape[ i ] ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Non-reduced dimensions must be consistent across all provided arrays. Input array shape: [%s]. Non-reduced dimension indices: [%s]. Non-reduced dimensions: [%s]. Array shape: [%s] (index: %d).', join( shx, ',' ), join( ldims, ',' ), join( shl, ',' ), join( arr[ j ].shape, ',' ), j ) );\n\t\t\t}\n\t\t}\n\t\t// Note that, if one of the dimensions is `0`, the length will be `0`...\n\t\tlen *= s;\n\n\t\t// Check whether the current dimension is a singleton dimension...\n\t\tif ( s === 1 ) {\n\t\t\tns += 1;\n\t\t}\n\t}\n\t// Check whether we were provided empty ndarrays...\n\tif ( len === 0 || ( shc.length && numel( shc ) === 0 ) ) {\n\t\treturn;\n\t}\n\t// Initialize ndarray-like objects for representing sub-array views...\n\tviews = [\n\t\t{\n\t\t\t'dtype': x.dtype,\n\t\t\t'data': x.data,\n\t\t\t'shape': shc,\n\t\t\t'strides': sc,\n\t\t\t'offset': x.offset,\n\t\t\t'order': x.order\n\t\t}\n\t];\n\tinitializeViews( arr, views );\n\n\t// Determine whether we only have one loop dimension and can thus readily perform one-dimensional iteration...\n\tif ( K === 1 ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, opts );\n\t}\n\tsy = y.strides;\n\n\t// Determine whether the loop dimensions have only **one** non-singleton dimension (e.g., shape=[10,1,1,1]) so that we can treat loop iteration as being equivalent to one-dimensional iteration...\n\tif ( ns === K-1 ) {\n\t\t// Get the index of the non-singleton dimension...\n\t\tfor ( i = 0; i < K; i++ ) {\n\t\t\tif ( shl[ i ] !== 1 ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ty.shape = [ shl[i] ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tarr[ j ].strides = [ arr[j].strides[i] ];\n\t\t}\n\t\tsl = [ sl[i] ];\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ 1 ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn UNARY[ 1 ]( fcn, arr, views, sl, opts );\n\t}\n\tiox = iterationOrder( sl ); // +/-1\n\tioy = iterationOrder( sy ); // +/-1\n\n\t// Determine whether we can avoid blocked iteration...\n\tord = strides2order( sl );\n\tif ( iox !== 0 && ioy !== 0 && ord === strides2order( sy ) && K <= MAX_DIMS ) { // eslint-disable-line max-len\n\t\t// So long as iteration for each respective array always moves in the same direction (i.e., no mixed sign strides) and the memory layouts are the same, we can leverage cache-optimal (i.e., normal) nested loops without resorting to blocked iteration...\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn ACCESSOR_UNARY[ K ]( fcn, arr, views, sl, ord === 1, opts );\n\t\t}\n\t\treturn UNARY[ K ]( fcn, arr, views, sl, ord === 1, opts );\n\t}\n\t// At this point, we're either dealing with non-contiguous n-dimensional arrays, high dimensional n-dimensional arrays, and/or arrays having differing memory layouts, so our only hope is that we can still perform blocked iteration...\n\n\t// Determine whether we can perform blocked iteration...\n\tif ( K <= MAX_DIMS ) {\n\t\tif ( y.accessorProtocol ) {\n\t\t\treturn BLOCKED_ACCESSOR_UNARY[ K-2 ]( fcn, arr, views, sl, opts );\n\t\t}\n\t\treturn BLOCKED_UNARY[ K-2 ]( fcn, arr, views, sl, opts );\n\t}\n\t// Fall-through to linear view iteration without regard for how data is stored in memory (i.e., take the slow path)...\n\tif ( y.accessorProtocol ) {\n\t\treturn accessorunarynd( fcn, arr, views, sl, opts );\n\t}\n\tunarynd( fcn, arr, views, sl, opts );\n}\n\n\n// EXPORTS //\n\nexport default unaryReduceSubarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport without from '@stdlib/array-base-without';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 1 );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], {} );\n*\n* var v = y.data;\n* // returns [ true ]\n*/\nfunction unary0d( fcn, arrays, opts ) {\n\tarrays[1].data[ arrays[1].offset ] = fcn( without( arrays, 1 ), opts );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, [ 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, [ 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary4d( base, [ x, y ], views, [ 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1]) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary5d( base, [ x, y ], views, [ 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary6d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary7d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary8d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, isRowMajor, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary9d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, isRowMajor, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary10d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, isRowMajor, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport without from '@stdlib/array-base-without';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 1 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 2, 2 ];\n* var ysh = [];\n*\n* // Define the array strides:\n* var sx = [ 6, 1 ];\n* var sy = [ 0 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Perform a reduction:\n* unary0d( base, [ x, y ], {} );\n*\n* var v = y.data.get( 0 );\n* // returns true\n*/\nfunction unary0d( fcn, arrays, opts ) {\n\tvar y = arrays[ 1 ];\n\ty.accessors[ 1 ]( y.data, y.offset, fcn( without( arrays, 1 ), opts ) );\n}\n\n\n// EXPORTS //\n\nexport default unary0d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 3, 2, 2 ];\n* var ysh = [ 3 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 2, 1 ];\n* var sy = [ 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary1d( base, [ x, y ], views, [ 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ true, false, true ]\n*/\nfunction unary1d( fcn, arrays, views, strides, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar sh;\n\tvar S0;\n\tvar iv;\n\tvar i0;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables: dimensions and loop offset (pointer) increments...\n\tS0 = sh[ 0 ];\n\tdv0 = [ strides[0] ];\n\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\tdv0.push( arrays[i].strides[0] );\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\tsetViewOffsets( views, iv );\n\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\tincrementOffsets( iv, dv0 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary1d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary2d( base, [ x, y ], views, [ 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction unary2d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 1 ];\n\t\tS1 = sh[ 0 ];\n\t\tdv0 = [ strides[1] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[0] - ( S0*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[1] );\n\t\t\tdv1.push( sv[0] - ( S0*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\tsetViewOffsets( views, iv );\n\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\tincrementOffsets( iv, dv0 );\n\t\t}\n\t\tincrementOffsets( iv, dv1 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary3d( base, [ x, y ], views, [ 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction unary3d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 2 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 0 ];\n\t\tdv0 = [ strides[2] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[2] ) ];\n\t\tdv2 = [ strides[0] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[2] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[2] ) );\n\t\t\tdv2.push( sv[0] - ( S1*sv[1] ) );\n\t\t}\n\t} else {\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv1 );\n\t\t}\n\t\tincrementOffsets( iv, dv2 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary4d( base, [ x, y ], views, [ 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction unary4d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 3 ];\n\t\tS1 = sh[ 2 ];\n\t\tS2 = sh[ 1 ];\n\t\tS3 = sh[ 0 ];\n\t\tdv0 = [ strides[3] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[2] - ( S0*strides[3] ) ];\n\t\tdv2 = [ strides[1] - ( S1*strides[2] ) ];\n\t\tdv3 = [ strides[0] - ( S2*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[3] );\n\t\t\tdv1.push( sv[2] - ( S0*sv[3] ) );\n\t\t\tdv2.push( sv[1] - ( S1*sv[2] ) );\n\t\t\tdv3.push( sv[0] - ( S2*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2]) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv2 );\n\t\t}\n\t\tincrementOffsets( iv, dv3 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary5d( base, [ x, y ], views, [ 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction unary5d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 4 ];\n\t\tS1 = sh[ 3 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 1 ];\n\t\tS4 = sh[ 0 ];\n\t\tdv0 = [ strides[4] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[3] - ( S0*strides[4] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[3] ) ];\n\t\tdv3 = [ strides[1] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[0] - ( S3*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[4] );\n\t\t\tdv1.push( sv[3] - ( S0*sv[4] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[3] ) );\n\t\t\tdv3.push( sv[1] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[0] - ( S3*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv3 );\n\t\t}\n\t\tincrementOffsets( iv, dv4 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary6d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction unary6d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 5 ];\n\t\tS1 = sh[ 4 ];\n\t\tS2 = sh[ 3 ];\n\t\tS3 = sh[ 2 ];\n\t\tS4 = sh[ 1 ];\n\t\tS5 = sh[ 0 ];\n\t\tdv0 = [ strides[5] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[4] - ( S0*strides[5] ) ];\n\t\tdv2 = [ strides[3] - ( S1*strides[4] ) ];\n\t\tdv3 = [ strides[2] - ( S2*strides[3] ) ];\n\t\tdv4 = [ strides[1] - ( S3*strides[2] ) ];\n\t\tdv5 = [ strides[0] - ( S4*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[5] );\n\t\t\tdv1.push( sv[4] - ( S0*sv[5] ) );\n\t\t\tdv2.push( sv[3] - ( S1*sv[4] ) );\n\t\t\tdv3.push( sv[2] - ( S2*sv[3] ) );\n\t\t\tdv4.push( sv[1] - ( S3*sv[2] ) );\n\t\t\tdv5.push( sv[0] - ( S4*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv4 );\n\t\t}\n\t\tincrementOffsets( iv, dv5 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary7d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction unary7d( fcn, arrays, views, strides, isRowMajor, opts ) {\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 6 ];\n\t\tS1 = sh[ 5 ];\n\t\tS2 = sh[ 4 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 2 ];\n\t\tS5 = sh[ 1 ];\n\t\tS6 = sh[ 0 ];\n\t\tdv0 = [ strides[6] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[5] - ( S0*strides[6] ) ];\n\t\tdv2 = [ strides[4] - ( S1*strides[5] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[4] ) ];\n\t\tdv4 = [ strides[2] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[1] - ( S4*strides[2] ) ];\n\t\tdv6 = [ strides[0] - ( S5*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[6] );\n\t\t\tdv1.push( sv[5] - ( S0*sv[6] ) );\n\t\t\tdv2.push( sv[4] - ( S1*sv[5] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[4] ) );\n\t\t\tdv4.push( sv[2] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[1] - ( S4*sv[2] ) );\n\t\t\tdv6.push( sv[0] - ( S5*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv5 );\n\t\t}\n\t\tincrementOffsets( iv, dv6 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary8d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction unary8d( fcn, arrays, views, strides, isRowMajor, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 7 ];\n\t\tS1 = sh[ 6 ];\n\t\tS2 = sh[ 5 ];\n\t\tS3 = sh[ 4 ];\n\t\tS4 = sh[ 3 ];\n\t\tS5 = sh[ 2 ];\n\t\tS6 = sh[ 1 ];\n\t\tS7 = sh[ 0 ];\n\t\tdv0 = [ strides[7] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[6] - ( S0*strides[7] ) ];\n\t\tdv2 = [ strides[5] - ( S1*strides[6] ) ];\n\t\tdv3 = [ strides[4] - ( S2*strides[5] ) ];\n\t\tdv4 = [ strides[3] - ( S3*strides[4] ) ];\n\t\tdv5 = [ strides[2] - ( S4*strides[3] ) ];\n\t\tdv6 = [ strides[1] - ( S5*strides[2] ) ];\n\t\tdv7 = [ strides[0] - ( S6*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[7] );\n\t\t\tdv1.push( sv[6] - ( S0*sv[7] ) );\n\t\t\tdv2.push( sv[5] - ( S1*sv[6] ) );\n\t\t\tdv3.push( sv[4] - ( S2*sv[5] ) );\n\t\t\tdv4.push( sv[3] - ( S3*sv[4] ) );\n\t\t\tdv5.push( sv[2] - ( S4*sv[3] ) );\n\t\t\tdv6.push( sv[1] - ( S5*sv[2] ) );\n\t\t\tdv7.push( sv[0] - ( S6*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv6 );\n\t\t}\n\t\tincrementOffsets( iv, dv7 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary9d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction unary9d( fcn, arrays, views, strides, isRowMajor, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 8 ];\n\t\tS1 = sh[ 7 ];\n\t\tS2 = sh[ 6 ];\n\t\tS3 = sh[ 5 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 3 ];\n\t\tS6 = sh[ 2 ];\n\t\tS7 = sh[ 1 ];\n\t\tS8 = sh[ 0 ];\n\t\tdv0 = [ strides[8] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[7] - ( S0*strides[8] ) ];\n\t\tdv2 = [ strides[6] - ( S1*strides[7] ) ];\n\t\tdv3 = [ strides[5] - ( S2*strides[6] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[5] ) ];\n\t\tdv5 = [ strides[3] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[2] - ( S5*strides[3] ) ];\n\t\tdv7 = [ strides[1] - ( S6*strides[2] ) ];\n\t\tdv8 = [ strides[0] - ( S7*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[8] );\n\t\t\tdv1.push( sv[7] - ( S0*sv[8] ) );\n\t\t\tdv2.push( sv[6] - ( S1*sv[7] ) );\n\t\t\tdv3.push( sv[5] - ( S2*sv[6] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[5] ) );\n\t\t\tdv5.push( sv[3] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[2] - ( S5*sv[3] ) );\n\t\t\tdv7.push( sv[1] - ( S6*sv[2] ) );\n\t\t\tdv8.push( sv[0] - ( S7*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv7 );\n\t\t}\n\t\tincrementOffsets( iv, dv8 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {boolean} isRowMajor - boolean indicating if provided arrays are in row-major order\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* unary10d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], true, {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction unary10d( fcn, arrays, views, strides, isRowMajor, opts ) { // eslint-disable-line max-statements\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar sh;\n\tvar S0;\n\tvar S1;\n\tvar S2;\n\tvar S3;\n\tvar S4;\n\tvar S5;\n\tvar S6;\n\tvar S7;\n\tvar S8;\n\tvar S9;\n\tvar sv;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar y;\n\tvar i;\n\n\t// Note on variable naming convention: S#, dv#, i# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\t// Resolve the output ndarray and associated shape:\n\ty = arrays[ 1 ];\n\tsh = y.shape;\n\n\t// Extract loop variables for purposes of loop interchange: dimensions and loop offset (pointer) increments...\n\tif ( isRowMajor ) {\n\t\t// For row-major ndarrays, the last dimensions have the fastest changing indices...\n\t\tS0 = sh[ 9 ];\n\t\tS1 = sh[ 8 ];\n\t\tS2 = sh[ 7 ];\n\t\tS3 = sh[ 6 ];\n\t\tS4 = sh[ 5 ];\n\t\tS5 = sh[ 4 ];\n\t\tS6 = sh[ 3 ];\n\t\tS7 = sh[ 2 ];\n\t\tS8 = sh[ 1 ];\n\t\tS9 = sh[ 0 ];\n\t\tdv0 = [ strides[9] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[8] - ( S0*strides[9] ) ];\n\t\tdv2 = [ strides[7] - ( S1*strides[8] ) ];\n\t\tdv3 = [ strides[6] - ( S2*strides[7] ) ];\n\t\tdv4 = [ strides[5] - ( S3*strides[6] ) ];\n\t\tdv5 = [ strides[4] - ( S4*strides[5] ) ];\n\t\tdv6 = [ strides[3] - ( S5*strides[4] ) ];\n\t\tdv7 = [ strides[2] - ( S6*strides[3] ) ];\n\t\tdv8 = [ strides[1] - ( S7*strides[2] ) ];\n\t\tdv9 = [ strides[0] - ( S8*strides[1] ) ]; // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[9] );\n\t\t\tdv1.push( sv[8] - ( S0*sv[9] ) );\n\t\t\tdv2.push( sv[7] - ( S1*sv[8] ) );\n\t\t\tdv3.push( sv[6] - ( S2*sv[7] ) );\n\t\t\tdv4.push( sv[5] - ( S3*sv[6] ) );\n\t\t\tdv5.push( sv[4] - ( S4*sv[5] ) );\n\t\t\tdv6.push( sv[3] - ( S5*sv[4] ) );\n\t\t\tdv7.push( sv[2] - ( S6*sv[3] ) );\n\t\t\tdv8.push( sv[1] - ( S7*sv[2] ) );\n\t\t\tdv9.push( sv[0] - ( S8*sv[1] ) );\n\t\t}\n\t} else { // order === 'column-major'\n\t\t// For column-major ndarrays, the first dimensions have the fastest changing indices...\n\t\tS0 = sh[ 0 ];\n\t\tS1 = sh[ 1 ];\n\t\tS2 = sh[ 2 ];\n\t\tS3 = sh[ 3 ];\n\t\tS4 = sh[ 4 ];\n\t\tS5 = sh[ 5 ];\n\t\tS6 = sh[ 6 ];\n\t\tS7 = sh[ 7 ];\n\t\tS8 = sh[ 8 ];\n\t\tS9 = sh[ 9 ];\n\t\tdv0 = [ strides[0] ];                     // offset increment for innermost loop\n\t\tdv1 = [ strides[1] - ( S0*strides[0] ) ];\n\t\tdv2 = [ strides[2] - ( S1*strides[1] ) ];\n\t\tdv3 = [ strides[3] - ( S2*strides[2] ) ];\n\t\tdv4 = [ strides[4] - ( S3*strides[3] ) ];\n\t\tdv5 = [ strides[5] - ( S4*strides[4] ) ];\n\t\tdv6 = [ strides[6] - ( S5*strides[5] ) ];\n\t\tdv7 = [ strides[7] - ( S6*strides[6] ) ];\n\t\tdv8 = [ strides[8] - ( S7*strides[7] ) ];\n\t\tdv9 = [ strides[9] - ( S8*strides[8] ) ];  // offset increment for outermost loop\n\t\tfor ( i = 1; i < arrays.length; i++ ) {\n\t\t\tsv = arrays[ i ].strides;\n\t\t\tdv0.push( sv[0] );\n\t\t\tdv1.push( sv[1] - ( S0*sv[0] ) );\n\t\t\tdv2.push( sv[2] - ( S1*sv[1] ) );\n\t\t\tdv3.push( sv[3] - ( S2*sv[2] ) );\n\t\t\tdv4.push( sv[4] - ( S3*sv[3] ) );\n\t\t\tdv5.push( sv[5] - ( S4*sv[4] ) );\n\t\t\tdv6.push( sv[6] - ( S5*sv[5] ) );\n\t\t\tdv7.push( sv[7] - ( S6*sv[6] ) );\n\t\t\tdv8.push( sv[8] - ( S7*sv[7] ) );\n\t\t\tdv9.push( sv[9] - ( S8*sv[8] ) );\n\t\t}\n\t}\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tiv = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Iterate over the non-reduced ndarray dimensions...\n\tfor ( i9 = 0; i9 < S9; i9++ ) {\n\t\tfor ( i8 = 0; i8 < S8; i8++ ) {\n\t\t\tfor ( i7 = 0; i7 < S7; i7++ ) {\n\t\t\t\tfor ( i6 = 0; i6 < S6; i6++ ) {\n\t\t\t\t\tfor ( i5 = 0; i5 < S5; i5++ ) {\n\t\t\t\t\t\tfor ( i4 = 0; i4 < S4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < S3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < S2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < S1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < S0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t}\n\t\t\tincrementOffsets( iv, dv8 );\n\t\t}\n\t\tincrementOffsets( iv, dv9 );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default unary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, [ 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary3d( base, [ x, y ], views, [ 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary4d( base, [ x, y ], views, [ 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary5d( base, [ x, y ], views, [ 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary6d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary7d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary8d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary9d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary10d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9[ k ] = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tybuf[ iv[1] ] = fcn( views, opts );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary2d( base, [ x, y ], views, [ 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction blockedunary2d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar ov1;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar j0;\n\tvar j1;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tdv1 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\tif ( j1 < bsize ) {\n\t\t\ts1 = j1;\n\t\t\tj1 = 0;\n\t\t} else {\n\t\t\ts1 = bsize;\n\t\t\tj1 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov1[ k ] = ov[k] + ( j1*sv[k][1] );\n\t\t}\n\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\tif ( j0 < bsize ) {\n\t\t\t\ts0 = j0;\n\t\t\t\tj0 = 0;\n\t\t\t} else {\n\t\t\t\ts0 = bsize;\n\t\t\t\tj0 -= bsize;\n\t\t\t}\n\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t}\n\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t}\n\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary3d( base, [ x, y ], views, [ 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ true, false, true ] ] ]\n*/\nfunction blockedunary3d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar ov1;\n\tvar ov2;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\tif ( j2 < bsize ) {\n\t\t\ts2 = j2;\n\t\t\tj2 = 0;\n\t\t} else {\n\t\t\ts2 = bsize;\n\t\t\tj2 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov2[ k ] = ov[k] + ( j2*sv[k][2] );\n\t\t}\n\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\tif ( j1 < bsize ) {\n\t\t\t\ts1 = j1;\n\t\t\t\tj1 = 0;\n\t\t\t} else {\n\t\t\t\ts1 = bsize;\n\t\t\t\tj1 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t}\n\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\ts0 = j0;\n\t\t\t\t\tj0 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts0 = bsize;\n\t\t\t\t\tj0 -= bsize;\n\t\t\t\t}\n\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t}\n\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t}\n\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary3d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary4d( base, [ x, y ], views, [ 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ true, false, true ] ] ] ]\n*/\nfunction blockedunary4d( fcn, arrays, views, strides, opts ) {\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\tif ( j3 < bsize ) {\n\t\t\ts3 = j3;\n\t\t\tj3 = 0;\n\t\t} else {\n\t\t\ts3 = bsize;\n\t\t\tj3 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov3[ k ] = ov[k] + ( j3*sv[k][3] );\n\t\t}\n\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\tif ( j2 < bsize ) {\n\t\t\t\ts2 = j2;\n\t\t\t\tj2 = 0;\n\t\t\t} else {\n\t\t\t\ts2 = bsize;\n\t\t\t\tj2 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t}\n\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\ts1 = j1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts1 = bsize;\n\t\t\t\t\tj1 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t}\n\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t}\n\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary4d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary5d( base, [ x, y ], views, [ 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ true, false, true ] ] ] ] ]\n*/\nfunction blockedunary5d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\tif ( j4 < bsize ) {\n\t\t\ts4 = j4;\n\t\t\tj4 = 0;\n\t\t} else {\n\t\t\ts4 = bsize;\n\t\t\tj4 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov4[ k ] = ov[k] + ( j4*sv[k][4] );\n\t\t}\n\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\tif ( j3 < bsize ) {\n\t\t\t\ts3 = j3;\n\t\t\t\tj3 = 0;\n\t\t\t} else {\n\t\t\t\ts3 = bsize;\n\t\t\t\tj3 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t}\n\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\ts2 = j2;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts2 = bsize;\n\t\t\t\t\tj2 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t}\n\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary5d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary6d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ true, false, true ] ] ] ] ] ]\n*/\nfunction blockedunary6d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[1];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\tif ( j5 < bsize ) {\n\t\t\ts5 = j5;\n\t\t\tj5 = 0;\n\t\t} else {\n\t\t\ts5 = bsize;\n\t\t\tj5 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov5[ k ] = ov[k] + ( j5*sv[k][5] );\n\t\t}\n\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\tif ( j4 < bsize ) {\n\t\t\t\ts4 = j4;\n\t\t\t\tj4 = 0;\n\t\t\t} else {\n\t\t\t\ts4 = bsize;\n\t\t\t\tj4 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t}\n\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\ts3 = j3;\n\t\t\t\t\tj3 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts3 = bsize;\n\t\t\t\t\tj3 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t}\n\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[1], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary6d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary7d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ]\n*/\nfunction blockedunary7d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\tif ( j6 < bsize ) {\n\t\t\ts6 = j6;\n\t\t\tj6 = 0;\n\t\t} else {\n\t\t\ts6 = bsize;\n\t\t\tj6 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov6[ k ] = ov[k] + ( j6*sv[k][6] );\n\t\t}\n\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\tif ( j5 < bsize ) {\n\t\t\t\ts5 = j5;\n\t\t\t\tj5 = 0;\n\t\t\t} else {\n\t\t\t\ts5 = bsize;\n\t\t\t\tj5 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t}\n\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\ts4 = j4;\n\t\t\t\t\tj4 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts4 = bsize;\n\t\t\t\t\tj4 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t}\n\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary7d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary8d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary8d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\tif ( j7 < bsize ) {\n\t\t\ts7 = j7;\n\t\t\tj7 = 0;\n\t\t} else {\n\t\t\ts7 = bsize;\n\t\t\tj7 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov7[ k ] = ov[k] + ( j7*sv[k][7] );\n\t\t}\n\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\tif ( j6 < bsize ) {\n\t\t\t\ts6 = j6;\n\t\t\t\tj6 = 0;\n\t\t\t} else {\n\t\t\t\ts6 = bsize;\n\t\t\t\tj6 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t}\n\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\ts5 = j5;\n\t\t\t\t\tj5 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts5 = bsize;\n\t\t\t\t\tj5 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t}\n\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary8d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary9d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary9d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\tif ( j8 < bsize ) {\n\t\t\ts8 = j8;\n\t\t\tj8 = 0;\n\t\t} else {\n\t\t\ts8 = bsize;\n\t\t\tj8 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov8[ k ] = ov[k] + ( j8*sv[k][8] );\n\t\t}\n\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\tif ( j7 < bsize ) {\n\t\t\t\ts7 = j7;\n\t\t\t\tj7 = 0;\n\t\t\t} else {\n\t\t\t\ts7 = bsize;\n\t\t\t\tj7 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t}\n\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\ts6 = j6;\n\t\t\t\t\tj6 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts6 = bsize;\n\t\t\t\t\tj6 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t}\n\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary9d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-depth, max-len */\n\n'use strict';\n\n// MODULES //\n\nimport loopOrder from '@stdlib/ndarray-base-unary-loop-interchange-order';\nimport blockSize from '@stdlib/ndarray-base-unary-tiling-block-size';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeros from '@stdlib/array-base-zeros';\nimport incrementOffsets from './increment_offsets.js';\nimport setViewOffsets from './set_view_offsets.js';\nimport offsets from './offsets.js';\n\n\n// MAIN //\n\n/**\n* Performs a reduction over an input ndarray and assigns results to a provided output ndarray via loop blocking.\n*\n* @private\n* @param {Function} fcn - reduction function\n* @param {Array<Object>} arrays - ndarrays\n* @param {Array<Object>} views - initialized ndarray-like objects representing sub-array views\n* @param {IntegerArray} strides - loop dimension strides for the input ndarray\n* @param {Options} opts - function options\n* @returns {void}\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import accessors from '@stdlib/array-base-accessors';\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = toAccessorArray( new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] ) );\n* var ybuf = toAccessorArray( filled( false, 3 ) );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2 ];\n* var ysh = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 2, 1 ];\n* var sy = [ 3, 3, 3, 3, 3, 3, 3, 3, 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major',\n*     'accessors': accessors( xbuf ).accessors\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major',\n*     'accessors': accessors( ybuf ).accessors\n* };\n*\n* // Initialize ndarray-like objects representing sub-array views:\n* var views = [\n*     {\n*         'dtype': x.dtype,\n*         'data': x.data,\n*         'shape': [ 2, 2 ],\n*         'strides': [ 2, 1 ],\n*         'offset': x.offset,\n*         'order': x.order\n*     }\n* ];\n*\n* // Perform a reduction:\n* blockedunary10d( base, [ x, y ], views, [ 12, 12, 12, 12, 12, 12, 12, 12, 12, 4 ], {} );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ [ [ [ [ [ [ [ [ true, false, true ] ] ] ] ] ] ] ] ] ]\n*/\nfunction blockedunary10d( fcn, arrays, views, strides, opts ) { // eslint-disable-line max-statements, max-lines-per-function\n\tvar bsize;\n\tvar ybuf;\n\tvar set;\n\tvar dv0;\n\tvar dv1;\n\tvar dv2;\n\tvar dv3;\n\tvar dv4;\n\tvar dv5;\n\tvar dv6;\n\tvar dv7;\n\tvar dv8;\n\tvar dv9;\n\tvar ov1;\n\tvar ov2;\n\tvar ov3;\n\tvar ov4;\n\tvar ov5;\n\tvar ov6;\n\tvar ov7;\n\tvar ov8;\n\tvar ov9;\n\tvar sh;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar s8;\n\tvar s9;\n\tvar sv;\n\tvar ov;\n\tvar iv;\n\tvar i0;\n\tvar i1;\n\tvar i2;\n\tvar i3;\n\tvar i4;\n\tvar i5;\n\tvar i6;\n\tvar i7;\n\tvar i8;\n\tvar i9;\n\tvar j0;\n\tvar j1;\n\tvar j2;\n\tvar j3;\n\tvar j4;\n\tvar j5;\n\tvar j6;\n\tvar j7;\n\tvar j8;\n\tvar j9;\n\tvar N;\n\tvar x;\n\tvar y;\n\tvar o;\n\tvar k;\n\n\t// Note on variable naming convention: S#, dv#, i#, j# where # corresponds to the loop number, with `0` being the innermost loop...\n\n\tN = arrays.length;\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\n\t// Resolve the loop interchange order:\n\to = loopOrder( y.shape, strides, y.strides );\n\tsh = o.sh;\n\tsv = [ o.sx, o.sy ];\n\tfor ( k = 2; k < N; k++ ) {\n\t\tsv.push( takeIndexed( arrays[k].strides, o.idx ) );\n\t}\n\t// Determine the block size:\n\tbsize = blockSize( x.dtype, y.dtype );\n\n\t// Resolve a list of pointers to the first indexed elements in the respective ndarrays:\n\tov = offsets( arrays );\n\n\t// Cache a reference to the output ndarray buffer:\n\tybuf = y.data;\n\n\t// Cache accessors:\n\tset = y.accessors[ 1 ];\n\n\t// Cache offset increments for the innermost loop...\n\tdv0 = [];\n\tfor ( k = 0; k < N; k++ ) {\n\t\tdv0.push( sv[k][0] );\n\t}\n\t// Initialize loop variables...\n\tov1 = zeros( N );\n\tov2 = zeros( N );\n\tov3 = zeros( N );\n\tov4 = zeros( N );\n\tov5 = zeros( N );\n\tov6 = zeros( N );\n\tov7 = zeros( N );\n\tov8 = zeros( N );\n\tov9 = zeros( N );\n\tdv1 = zeros( N );\n\tdv2 = zeros( N );\n\tdv3 = zeros( N );\n\tdv4 = zeros( N );\n\tdv5 = zeros( N );\n\tdv6 = zeros( N );\n\tdv7 = zeros( N );\n\tdv8 = zeros( N );\n\tdv9 = zeros( N );\n\tiv = zeros( N );\n\n\t// Iterate over blocks...\n\tfor ( j9 = sh[9]; j9 > 0; ) {\n\t\tif ( j9 < bsize ) {\n\t\t\ts9 = j9;\n\t\t\tj9 = 0;\n\t\t} else {\n\t\t\ts9 = bsize;\n\t\t\tj9 -= bsize;\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tov9[ k ] = ov[k] + ( j9*sv[k][9] );\n\t\t}\n\t\tfor ( j8 = sh[8]; j8 > 0; ) {\n\t\t\tif ( j8 < bsize ) {\n\t\t\t\ts8 = j8;\n\t\t\t\tj8 = 0;\n\t\t\t} else {\n\t\t\t\ts8 = bsize;\n\t\t\t\tj8 -= bsize;\n\t\t\t}\n\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\tdv9[ k ] = sv[k][9] - ( s8*sv[k][8] );\n\t\t\t\tov8[ k ] = ov9[k] + ( j8*sv[k][8] );\n\t\t\t}\n\t\t\tfor ( j7 = sh[7]; j7 > 0; ) {\n\t\t\t\tif ( j7 < bsize ) {\n\t\t\t\t\ts7 = j7;\n\t\t\t\t\tj7 = 0;\n\t\t\t\t} else {\n\t\t\t\t\ts7 = bsize;\n\t\t\t\t\tj7 -= bsize;\n\t\t\t\t}\n\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\tdv8[ k ] = sv[k][8] - ( s7*sv[k][7] );\n\t\t\t\t\tov7[ k ] = ov8[k] + ( j7*sv[k][7] );\n\t\t\t\t}\n\t\t\t\tfor ( j6 = sh[6]; j6 > 0; ) {\n\t\t\t\t\tif ( j6 < bsize ) {\n\t\t\t\t\t\ts6 = j6;\n\t\t\t\t\t\tj6 = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts6 = bsize;\n\t\t\t\t\t\tj6 -= bsize;\n\t\t\t\t\t}\n\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\tdv7[ k ] = sv[k][7] - ( s6*sv[k][6] );\n\t\t\t\t\t\tov6[ k ] = ov7[k] + ( j6*sv[k][6] );\n\t\t\t\t\t}\n\t\t\t\t\tfor ( j5 = sh[5]; j5 > 0; ) {\n\t\t\t\t\t\tif ( j5 < bsize ) {\n\t\t\t\t\t\t\ts5 = j5;\n\t\t\t\t\t\t\tj5 = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts5 = bsize;\n\t\t\t\t\t\t\tj5 -= bsize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\tdv6[ k ] = sv[k][6] - ( s5*sv[k][5] );\n\t\t\t\t\t\t\tov5[ k ] = ov6[k] + ( j5*sv[k][5] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor ( j4 = sh[4]; j4 > 0; ) {\n\t\t\t\t\t\t\tif ( j4 < bsize ) {\n\t\t\t\t\t\t\t\ts4 = j4;\n\t\t\t\t\t\t\t\tj4 = 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts4 = bsize;\n\t\t\t\t\t\t\t\tj4 -= bsize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\tdv5[ k ] = sv[k][5] - ( s4*sv[k][4] );\n\t\t\t\t\t\t\t\tov4[ k ] = ov5[k] + ( j4*sv[k][4] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor ( j3 = sh[3]; j3 > 0; ) {\n\t\t\t\t\t\t\t\tif ( j3 < bsize ) {\n\t\t\t\t\t\t\t\t\ts3 = j3;\n\t\t\t\t\t\t\t\t\tj3 = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts3 = bsize;\n\t\t\t\t\t\t\t\t\tj3 -= bsize;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\tdv4[ k ] = sv[k][4] - ( s3*sv[k][3] );\n\t\t\t\t\t\t\t\t\tov3[ k ] = ov4[k] + ( j3*sv[k][3] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor ( j2 = sh[2]; j2 > 0; ) {\n\t\t\t\t\t\t\t\t\tif ( j2 < bsize ) {\n\t\t\t\t\t\t\t\t\t\ts2 = j2;\n\t\t\t\t\t\t\t\t\t\tj2 = 0;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts2 = bsize;\n\t\t\t\t\t\t\t\t\t\tj2 -= bsize;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\tdv3[ k ] = sv[k][3] - ( s2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t\tov2[ k ] = ov3[k] + ( j2*sv[k][2] );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor ( j1 = sh[1]; j1 > 0; ) {\n\t\t\t\t\t\t\t\t\t\tif ( j1 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\ts1 = j1;\n\t\t\t\t\t\t\t\t\t\t\tj1 = 0;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts1 = bsize;\n\t\t\t\t\t\t\t\t\t\t\tj1 -= bsize;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\tdv2[ k ] = sv[k][2] - ( s1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t\tov1[ k ] = ov2[k] + ( j1*sv[k][1] );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tfor ( j0 = sh[0]; j0 > 0; ) {\n\t\t\t\t\t\t\t\t\t\t\tif ( j0 < bsize ) {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = j0;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 = 0;\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\ts0 = bsize;\n\t\t\t\t\t\t\t\t\t\t\t\tj0 -= bsize;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Compute index offsets and loop offset increments for the first ndarray elements in the current block...\n\t\t\t\t\t\t\t\t\t\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tiv[ k ] = ov1[k] + ( j0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t\tdv1[ k ] = sv[k][1] - ( s0*sv[k][0] );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Iterate over the non-reduced ndarray dimensions...\n\t\t\t\t\t\t\t\t\t\t\tfor ( i9 = 0; i9 < s9; i9++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\tfor ( i8 = 0; i8 < s8; i8++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i7 = 0; i7 < s7; i7++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i6 = 0; i6 < s6; i6++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i5 = 0; i5 < s5; i5++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i4 = 0; i4 < s4; i4++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i3 = 0; i3 < s3; i3++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i2 = 0; i2 < s2; i2++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i1 = 0; i1 < s1; i1++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor ( i0 = 0; i0 < s0; i0++ ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetViewOffsets( views, iv );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tset( ybuf, iv[ 1 ], fcn( views, opts ) );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv0 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv1 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv2 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv3 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv4 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv5 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv6 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv7 );\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv8 );\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tincrementOffsets( iv, dv9 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default blockedunary10d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Initialize ndarray-like objects for representing zero-dimensional sub-array views of ancillary ndarray arguments.\n*\n* ## Notes\n*\n* -   This function ignores the first two ndarray-like objects, which are assumed to be the input and output ndarray, respectively.\n* -   This function mutates the provided output array.\n*\n* @private\n* @param {ArrayLikeObject<Object>} arrays - list of ndarray-like objects\n* @param {Array<Object>} out - output array\n* @returns {Array<Object>} output array\n*/\nfunction initializeViews( arrays, out ) {\n\tvar v;\n\tvar i;\n\n\tfor ( i = 2; i < arrays.length; i++ ) {\n\t\tv = arrays[ i ];\n\t\tout.push({\n\t\t\t'dtype': v.dtype,\n\t\t\t'data': v.data,\n\t\t\t'shape': [],\n\t\t\t'strides': [ 0 ],\n\t\t\t'offset': v.offset,\n\t\t\t'order': v.order\n\t\t});\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default initializeViews;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport reduce from './main.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for performing a reduction over a list of specified dimensions in an input ndarray and assigning results to a provided output ndarray.\n*\n* @param {Function} fcn - reduction function\n* @throws {TypeError} first argument must be a function\n* @returns {Function} function for performing a reduction\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var every = factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* every( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\nfunction factory( fcn ) {\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'null3c', fcn ) );\n\t}\n\treturn reducer;\n\n\t/**\n\t* Performs a reduction over a list of specified dimensions in an input ndarray and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ArrayLikeObject<Object>} arrays - array-like object containing ndarrays\n\t* @param {IntegerArray} dims - list of dimensions over which to perform a reduction\n\t* @param {Options} [options] - function options\n\t* @returns {void}\n\t*/\n\tfunction reducer( arrays, dims, options ) {\n\t\tvar opts;\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = {};\n\t\t}\n\t\treturn reduce( fcn, arrays, dims, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Perform a reduction over a list of specified dimensions in an input ndarray and assign results to a provided output ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-subarray\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import every from '@stdlib/ndarray-base-every';\n* import unaryReduceSubarray from '@stdlib/ndarray-base-unary-reduce-subarray';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Perform a reduction:\n* unaryReduceSubarray( every, [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n* import filled from '@stdlib/array-base-filled';\n* import ndarray2array from '@stdlib/ndarray-base-to-array';\n* import base from '@stdlib/ndarray-base-every';\n* import unaryReduceSubarray from '@stdlib/ndarray-base-unary-reduce-subarray';\n*\n* // Create data buffers:\n* var xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n* var ybuf = filled( false, 3 );\n*\n* // Define the array shapes:\n* var xsh = [ 1, 3, 2, 2 ];\n* var ysh = [ 1, 3 ];\n*\n* // Define the array strides:\n* var sx = [ 12, 4, 2, 1 ];\n* var sy = [ 3, 1 ];\n*\n* // Define the index offsets:\n* var ox = 0;\n* var oy = 0;\n*\n* // Create an input ndarray-like object:\n* var x = {\n*     'dtype': 'float64',\n*     'data': xbuf,\n*     'shape': xsh,\n*     'strides': sx,\n*     'offset': ox,\n*     'order': 'row-major'\n* };\n*\n* // Create an output ndarray-like object:\n* var y = {\n*     'dtype': 'generic',\n*     'data': ybuf,\n*     'shape': ysh,\n*     'strides': sy,\n*     'offset': oy,\n*     'order': 'row-major'\n* };\n*\n* // Create a function for performing a reduction over subarrays:\n* var every = unaryReduceSubarray.factory( base );\n* // returns <Function>\n*\n* // Perform a reduction:\n* every( [ x, y ], [ 2, 3 ] );\n*\n* var arr = ndarray2array( y.data, y.shape, y.strides, y.offset, y.order );\n* // returns [ [ true, false, true ] ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\" }\n"],"names":["incrementOffsets","offsets","inc","i","length","setViewOffsets","views","j","offset","arrays","out","push","MODE","UNARY","fcn","opts","data","without","strides","ybuf","dv0","S0","iv","i0","y","shape","isRowMajor","dv1","sh","S1","sv","i1","dv2","S2","i2","dv3","S3","i3","dv4","S4","i4","dv5","S5","i5","dv6","S6","i6","dv7","S7","i7","dv8","S8","i8","dv9","S9","i9","ACCESSOR_UNARY","accessors","set","BLOCKED_UNARY","bsize","ov1","s0","s1","ov","j0","j1","N","x","o","k","loopOrder","sx","sy","takeIndexed","idx","blockSize","dtype","zeros","ov2","s2","j2","ov3","s3","j3","ov4","s4","j4","ov5","s5","j5","ov6","s6","j6","ov7","s7","j7","ov8","s8","j8","ov9","s9","j9","BLOCKED_ACCESSOR_UNARY","MAX_DIMS","unaryReduceSubarray","dims","options","ndims","ldims","arr","tmp","len","shx","shc","shl","iox","ioy","ord","sc","sl","ns","d","s","M","K","arguments","ndarray2object","normalizeIndices","RangeError","format","join","sort","Error","accessorProtocol","indicesComplement","takeIndexed2","numel","v","order","initializeViews","iterationOrder","strides2order","io","vind2bind","accessorunarynd","unarynd","factory","isFunction","TypeError","reduce","setReadOnly","main"],"mappings":";;8vDAkCA,SAASA,EAAkBC,EAASC,GACnC,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAChCF,EAASE,IAAOD,EAAKC,GAEtB,OAAOF,CACR,CCLA,SAASI,EAAgBC,EAAOL,GAC/B,IAAIE,EACAI,EACJ,IAAMJ,EAAI,EAAGI,EAAI,EAAGJ,EAAIF,EAAQG,OAAQD,IAC5B,IAANA,IAGLG,EAAOC,GAAIC,OAASP,EAASE,GAC7BI,GAAK,GAEN,OAAOD,CACR,CCjBA,SAASL,EAASQ,GACjB,IACIN,EADAO,EAAM,GAEV,IAAMP,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/BO,EAAIC,KAAMF,EAAQN,GAAIK,QAEvB,OAAOE,CACR,CCLA,IAAIE,EAAO,QCAX,IAAIA,EAAO,QC+CX,IAAIC,EAAQ,CCMZ,SAAkBC,EAAKL,EAAQM,GAC9BN,EAAO,GAAGO,KAAMP,EAAO,GAAGD,QAAWM,EAAKG,EAASR,EAAQ,GAAKM,EACjE,ECcA,SAAkBD,EAAKL,EAAQH,EAAOY,EAASH,GAC9C,IAAII,EACAC,EAEAC,EACAC,EACAC,EACAC,EACArB,EAWJ,IAFAkB,GAJAG,EAAIf,EAAQ,IACLgB,MAGE,GACTL,EAAM,CAAEF,EAAQ,IACVf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/BiB,EAAIT,KAAMF,EAAON,GAAGe,QAAQ,IAS7B,IANAI,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHO,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,EAExB,ECjCA,SAAkBN,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAC,EACAP,EACAQ,EACAC,EACAR,EACAC,EACAQ,EACAP,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAMJ,IAJAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,SAQ3B,IAJAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHe,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACF,EC3DA,SAAkBb,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAJ,EACAP,EACAQ,EACAI,EACAH,EACAR,EACAC,EACAQ,EACAG,EACAV,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAQJ,IANAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,SAU3B,IANAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHkB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACF,ECvEA,SAAkBlB,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAP,EACAP,EACAQ,EACAI,EACAG,EACAN,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAb,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAUJ,IARAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,SAY3B,IARAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHqB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACF,ECnFA,SAAkBrB,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAG,EACAV,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAT,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAhB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAYJ,IAVAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,SAc3B,IAVAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHwB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACF,EC7FA,SAAkBxB,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAb,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAZ,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAnB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAcJ,IAZAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,SAgB3B,IAZAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGH2B,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACF,EC3GA,SAAkB3B,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAhB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAf,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAtB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAgBJ,IAdAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,SAkB3B,IAdAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGH8B,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACF,ECvHA,SAAkB9B,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAnB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlB,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAzB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAkBJ,IAhBAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,SAoB3B,IAhBAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHiC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACF,ECnIA,SAAkBjC,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAtB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA5B,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAoBJ,IAlBAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,SAsB3B,IAlBAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHoC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACF,EC/IA,SAAmBpC,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC3D,IAAII,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAzB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA/B,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAsBJ,IApBAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACT0B,EAAK1B,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAClCmC,EAAM,CAAEnC,EAAQ,GAAOiC,EAAGjC,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,IAC1BuB,EAAI1C,KAAMmB,EAAG,GAAOqB,EAAGrB,EAAG,SAwB3B,IApBAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACT0B,EAAK1B,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAClCmC,EAAM,CAAEnC,EAAQ,GAAOiC,EAAGjC,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,IAC1BuB,EAAI1C,KAAMmB,EAAG,GAAOqB,EAAGrB,EAAG,IAU5B,IANAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGHuC,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACDlD,EAAkBsB,EAAI+B,EACtB,CACF,GXvKIG,EAAiB,CYHrB,SAAkB1C,EAAKL,EAAQM,GAC9B,IAAIS,EAAIf,EAAQ,GAChBe,EAAEiC,UAAW,GAAKjC,EAAER,KAAMQ,EAAEhB,OAAQM,EAAKG,EAASR,EAAQ,GAAKM,GAChE,ECaA,SAAkBD,EAAKL,EAAQH,EAAOY,EAASH,GAC9C,IAAII,EACAuC,EACAtC,EAEAC,EACAC,EACAC,EACAC,EACArB,EAWJ,IAFAkB,GAJAG,EAAIf,EAAQ,IACLgB,MAGE,GACTL,EAAM,CAAEF,EAAQ,IACVf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/BiB,EAAIT,KAAMF,EAAON,GAAGe,QAAQ,IAY7B,IATAI,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGblC,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,EAExB,ECrCA,SAAkBN,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAC,EACAP,EACAQ,EACAC,EACAR,EACAC,EACAQ,EACAP,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAMJ,IAJAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,SAQ3B,IAJAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGb1B,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACF,EC/DA,SAAkBb,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAJ,EACAP,EACAQ,EACAI,EACAH,EACAR,EACAC,EACAQ,EACAG,EACAV,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAQJ,IANAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,SAU3B,IANAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbvB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACF,EC3EA,SAAkBlB,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAP,EACAP,EACAQ,EACAI,EACAG,EACAN,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAb,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAUJ,IARAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,SAY3B,IARAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbpB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACF,ECvFA,SAAkBrB,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAV,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAT,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAhB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAYJ,IAVAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,SAc3B,IAVAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbjB,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACF,ECjGA,SAAkBxB,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAb,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAZ,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAnB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAcJ,IAZAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,SAgB3B,IAZAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbd,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACF,EC/GA,SAAkB3B,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAhB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAf,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAtB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAgBJ,IAdAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,SAkB3B,IAdAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbX,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACF,EC3HA,SAAkB9B,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAnB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlB,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAzB,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAkBJ,IAhBAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,SAoB3B,IAhBAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbR,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACF,ECvIA,SAAkBjC,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC1D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAtB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArB,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA5B,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAoBJ,IAlBAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,SAsB3B,IAlBAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbL,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACF,ECnJA,SAAmBpC,EAAKL,EAAQH,EAAOY,EAASQ,EAAYX,GAC3D,IAAII,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAzB,EACAP,EACAQ,EACAI,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxB,EACAR,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACA/B,EACArB,EASJ,GAHAyB,GADAJ,EAAIf,EAAQ,IACLgB,MAGFC,EAsBJ,IApBAL,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACT0B,EAAK1B,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAClCmC,EAAM,CAAEnC,EAAQ,GAAOiC,EAAGjC,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,IAC1BuB,EAAI1C,KAAMmB,EAAG,GAAOqB,EAAGrB,EAAG,SAwB3B,IApBAT,EAAKO,EAAI,GACTC,EAAKD,EAAI,GACTK,EAAKL,EAAI,GACTQ,EAAKR,EAAI,GACTW,EAAKX,EAAI,GACTc,EAAKd,EAAI,GACTiB,EAAKjB,EAAI,GACToB,EAAKpB,EAAI,GACTuB,EAAKvB,EAAI,GACT0B,EAAK1B,EAAI,GACTR,EAAM,CAAEF,EAAQ,IAChBS,EAAM,CAAET,EAAQ,GAAOG,EAAGH,EAAQ,IAClCc,EAAM,CAAEd,EAAQ,GAAOW,EAAGX,EAAQ,IAClCiB,EAAM,CAAEjB,EAAQ,GAAOe,EAAGf,EAAQ,IAClCoB,EAAM,CAAEpB,EAAQ,GAAOkB,EAAGlB,EAAQ,IAClCuB,EAAM,CAAEvB,EAAQ,GAAOqB,EAAGrB,EAAQ,IAClC0B,EAAM,CAAE1B,EAAQ,GAAOwB,EAAGxB,EAAQ,IAClC6B,EAAM,CAAE7B,EAAQ,GAAO2B,EAAG3B,EAAQ,IAClCgC,EAAM,CAAEhC,EAAQ,GAAO8B,EAAG9B,EAAQ,IAClCmC,EAAM,CAAEnC,EAAQ,GAAOiC,EAAGjC,EAAQ,IAC5Bf,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/B2B,EAAKrB,EAAQN,GAAIe,QACjBE,EAAIT,KAAMmB,EAAG,IACbH,EAAIhB,KAAMmB,EAAG,GAAOT,EAAGS,EAAG,IAC1BE,EAAIrB,KAAMmB,EAAG,GAAOD,EAAGC,EAAG,IAC1BK,EAAIxB,KAAMmB,EAAG,GAAOG,EAAGH,EAAG,IAC1BQ,EAAI3B,KAAMmB,EAAG,GAAOM,EAAGN,EAAG,IAC1BW,EAAI9B,KAAMmB,EAAG,GAAOS,EAAGT,EAAG,IAC1Bc,EAAIjC,KAAMmB,EAAG,GAAOY,EAAGZ,EAAG,IAC1BiB,EAAIpC,KAAMmB,EAAG,GAAOe,EAAGf,EAAG,IAC1BoB,EAAIvC,KAAMmB,EAAG,GAAOkB,EAAGlB,EAAG,IAC1BuB,EAAI1C,KAAMmB,EAAG,GAAOqB,EAAGrB,EAAG,IAa5B,IATAR,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGbF,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKD,EAAIC,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKF,EAAIE,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKF,EAAIE,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACDlD,EAAkBsB,EAAI+B,EACtB,CACF,GtBlKIM,EAAgB,CuBApB,SAAyB7C,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAkC,EACAjC,EACAkC,EACAC,EACAjC,EACAkC,EACA1C,EACAC,EACAQ,EACAkC,EACAC,EACAC,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGTI,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAQjB,IALAT,EAAMiB,EAAOX,GACbxC,EAAMmD,EAAOX,GACb7C,EAAKwD,EAAOX,GAGND,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBT,EAAKS,GAAMN,EAAGM,GAAOJ,EAAGpC,EAAGwC,GAAG,GAE/B,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAMvC,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD,CACD,CACF,ECxFA,SAAyBb,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACA6B,EACAkB,EACAnD,EACAkC,EACAC,EACAiB,EACAlD,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACA+B,EACAC,EACAe,EACAd,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGTI,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAUjB,IAPAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNc,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBS,EAAKT,GAAMN,EAAGM,GAAOW,EAAGnD,EAAGwC,GAAG,GAE/B,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAC/BtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GAElC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAMpC,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACD,CACD,CACD,CACF,ECjHA,SAAyBlB,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACA0B,EACAkB,EACAG,EACAtD,EACAkC,EACAC,EACAiB,EACAG,EACArD,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACA4B,EACAC,EACAe,EACAG,EACAjB,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGTI,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAYjB,IATAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNiB,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBY,EAAKZ,GAAMN,EAAGM,GAAOc,EAAGtD,EAAGwC,GAAG,GAE/B,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBS,EAAKT,GAAMY,EAAIZ,GAAOW,EAAGnD,EAAGwC,GAAG,GAC/BnC,EAAKmC,GAAMxC,EAAGwC,GAAG,GAAOU,EAAGlD,EAAGwC,GAAG,GAElC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAC/BtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GAElC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAMjC,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACD,CACD,CACD,CACD,CACF,ECxIA,SAAyBrB,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACAG,EACAuB,EACAkB,EACAG,EACAG,EACAzD,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAxD,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAyB,EACAC,EACAe,EACAG,EACAG,EACApB,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGTI,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAcjB,IAXAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbkB,EAAMP,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7B,EAAMwC,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNoB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBe,EAAKf,GAAMN,EAAGM,GAAOiB,EAAGzD,EAAGwC,GAAG,GAE/B,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhC,EAAKgC,GAAMxC,EAAGwC,GAAG,GAAOa,EAAGrD,EAAGwC,GAAG,GACjCY,EAAKZ,GAAMe,EAAIf,GAAOc,EAAGtD,EAAGwC,GAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBnC,EAAKmC,GAAMxC,EAAGwC,GAAG,GAAOU,EAAGlD,EAAGwC,GAAG,GACjCS,EAAKT,GAAMY,EAAIZ,GAAOW,EAAGnD,EAAGwC,GAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GACjCT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAM9B,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACD,CACD,CACD,CACD,CACD,CACF,EC/JA,SAAyBxB,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAoB,EACAkB,EACAG,EACAG,EACAG,EACA5D,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACA3D,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAsB,EACAC,EACAe,EACAG,EACAG,EACAG,EACAvB,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGTI,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAgBjB,IAbAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbkB,EAAMP,EAAOX,GACbqB,EAAMV,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7B,EAAMwC,EAAOX,GACb1B,EAAMqC,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNuB,EAAK9D,EAAG,GAAI8D,EAAK,GAAK,CAQ3B,IAPKA,EAAK9B,GACT6B,EAAKC,EACLA,EAAK,IAELD,EAAK7B,EACL8B,GAAM9B,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBkB,EAAKlB,GAAMN,EAAGM,GAAOoB,EAAG5D,EAAGwC,GAAG,GAE/B,IAAMiB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnB7B,EAAK6B,GAAMxC,EAAGwC,GAAG,GAAOgB,EAAGxD,EAAGwC,GAAG,GACjCe,EAAKf,GAAMkB,EAAIlB,GAAOiB,EAAGzD,EAAGwC,GAAG,GAEhC,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhC,EAAKgC,GAAMxC,EAAGwC,GAAG,GAAOa,EAAGrD,EAAGwC,GAAG,GACjCY,EAAKZ,GAAMe,EAAIf,GAAOc,EAAGtD,EAAGwC,GAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBnC,EAAKmC,GAAMxC,EAAGwC,GAAG,GAAOU,EAAGlD,EAAGwC,GAAG,GACjCS,EAAKT,GAAMY,EAAIZ,GAAOW,EAAGnD,EAAGwC,GAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GACjCT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAM3B,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACF,ECtLA,SAAyB3B,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAiB,EACAkB,EACAG,EACAG,EACAG,EACAG,EACA/D,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACA9D,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAmB,EACAC,EACAe,EACAG,EACAG,EACAG,EACAG,EACA1B,EACAC,EACA5C,GACA6C,GACAC,GAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,EAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,EAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGTI,EAAM,GACAkD,GAAI,EAAGA,GAAIH,EAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAkBjB,IAfAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbkB,EAAMP,EAAOX,GACbqB,EAAMV,EAAOX,GACbwB,EAAMb,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7B,EAAMwC,EAAOX,GACb1B,EAAMqC,EAAOX,GACbvB,EAAMkC,EAAOX,GACb7C,EAAKwD,EAAOX,GAGN0B,EAAKjE,EAAG,GAAIiE,EAAK,GAAK,CAQ3B,IAPKA,EAAKjC,GACTgC,EAAKC,EACLA,EAAK,IAELD,EAAKhC,EACLiC,GAAMjC,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBqB,EAAKrB,IAAMN,EAAGM,IAAOuB,EAAG/D,EAAGwC,IAAG,GAE/B,IAAMoB,EAAK9D,EAAG,GAAI8D,EAAK,GAAK,CAQ3B,IAPKA,EAAK9B,GACT6B,EAAKC,EACLA,EAAK,IAELD,EAAK7B,EACL8B,GAAM9B,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,EAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,EAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,EAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,EAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,EAAGpC,EAAGwC,IAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,EAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMxB,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,EC7MA,SAAyB9B,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAc,EACAkB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlE,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAjE,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAgB,EACAC,EACAe,EACAG,EACAG,EACAG,GACAG,GACAG,GACA7B,GACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,GAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,GAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGTI,EAAM,GACAkD,GAAI,EAAGA,GAAIH,GAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAoBjB,IAjBAT,EAAMiB,EAAOX,IACbY,EAAMD,EAAOX,IACbe,EAAMJ,EAAOX,IACbkB,EAAMP,EAAOX,IACbqB,EAAMV,EAAOX,IACbwB,EAAMb,EAAOX,IACb2B,EAAMhB,EAAOX,IACbxC,EAAMmD,EAAOX,IACbnC,EAAM8C,EAAOX,IACbhC,EAAM2C,EAAOX,IACb7B,EAAMwC,EAAOX,IACb1B,EAAMqC,EAAOX,IACbvB,EAAMkC,EAAOX,IACbpB,EAAM+B,EAAOX,IACb7C,EAAKwD,EAAOX,IAGN6B,GAAKpE,EAAG,GAAIoE,GAAK,GAAK,CAQ3B,IAPKA,GAAKpC,GACTmC,EAAKC,GACLA,GAAK,IAELD,EAAKnC,EACLoC,IAAMpC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBwB,EAAKxB,IAAMN,EAAGM,IAAO0B,GAAGlE,EAAGwC,IAAG,GAE/B,IAAMuB,GAAKjE,EAAG,GAAIiE,GAAK,GAAK,CAQ3B,IAPKA,GAAKjC,GACTgC,EAAKC,GACLA,GAAK,IAELD,EAAKhC,EACLiC,IAAMjC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBvB,EAAKuB,IAAMxC,EAAGwC,IAAG,GAAOsB,EAAG9D,EAAGwC,IAAG,GACjCqB,EAAKrB,IAAMwB,EAAIxB,IAAOuB,GAAG/D,EAAGwC,IAAG,GAEhC,IAAMoB,GAAK9D,EAAG,GAAI8D,GAAK,GAAK,CAQ3B,IAPKA,GAAK9B,GACT6B,EAAKC,GACLA,GAAK,IAELD,EAAK7B,EACL8B,IAAM9B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,GAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,EAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,EAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,EAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,EAAGpC,EAAGwC,IAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,EAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMrB,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,ECpOA,SAAyBjC,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAW,EACAkB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArE,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACApE,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAa,EACAC,GACAe,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAhC,GACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,GAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,GAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGTI,EAAM,GACAkD,GAAI,EAAGA,GAAIH,GAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAsBjB,IAnBAT,EAAMiB,EAAOX,IACbY,EAAMD,EAAOX,IACbe,EAAMJ,EAAOX,IACbkB,EAAMP,EAAOX,IACbqB,EAAMV,EAAOX,IACbwB,EAAMb,EAAOX,IACb2B,EAAMhB,EAAOX,IACb8B,EAAMnB,EAAOX,IACbxC,EAAMmD,EAAOX,IACbnC,EAAM8C,EAAOX,IACbhC,EAAM2C,EAAOX,IACb7B,EAAMwC,EAAOX,IACb1B,EAAMqC,EAAOX,IACbvB,EAAMkC,EAAOX,IACbpB,EAAM+B,EAAOX,IACbjB,EAAM4B,EAAOX,IACb7C,EAAKwD,EAAOX,IAGNgC,GAAKvE,EAAG,GAAIuE,GAAK,GAAK,CAQ3B,IAPKA,GAAKvC,GACTsC,EAAKC,GACLA,GAAK,IAELD,EAAKtC,EACLuC,IAAMvC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB2B,EAAK3B,IAAMN,EAAGM,IAAO6B,GAAGrE,EAAGwC,IAAG,GAE/B,IAAM0B,GAAKpE,EAAG,GAAIoE,GAAK,GAAK,CAQ3B,IAPKA,GAAKpC,GACTmC,EAAKC,GACLA,GAAK,IAELD,EAAKnC,EACLoC,IAAMpC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBpB,EAAKoB,IAAMxC,EAAGwC,IAAG,GAAOyB,EAAGjE,EAAGwC,IAAG,GACjCwB,EAAKxB,IAAM2B,EAAI3B,IAAO0B,GAAGlE,EAAGwC,IAAG,GAEhC,IAAMuB,GAAKjE,EAAG,GAAIiE,GAAK,GAAK,CAQ3B,IAPKA,GAAKjC,GACTgC,EAAKC,GACLA,GAAK,IAELD,EAAKhC,EACLiC,IAAMjC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBvB,EAAKuB,IAAMxC,EAAGwC,IAAG,GAAOsB,EAAG9D,EAAGwC,IAAG,GACjCqB,EAAKrB,IAAMwB,EAAIxB,IAAOuB,GAAG/D,EAAGwC,IAAG,GAEhC,IAAMoB,GAAK9D,EAAG,GAAI8D,GAAK,GAAK,CAQ3B,IAPKA,GAAK9B,GACT6B,EAAKC,GACLA,GAAK,IAELD,EAAK7B,EACL8B,IAAM9B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,GAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,GAAK3D,EAAG,GAAI2D,GAAK,GAAK,CAQ3B,IAPKA,GAAK3B,GACT0B,EAAKC,GACLA,GAAK,IAELD,EAAK1B,EACL2B,IAAM3B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,GAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,GAAKxD,EAAG,GAAIwD,GAAK,GAAK,CAQ3B,IAPKA,GAAKxB,GACTuB,EAAKC,GACLA,GAAK,IAELD,EAAKvB,EACLwB,IAAMxB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,GAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,GAAKrD,EAAG,GAAIqD,GAAK,GAAK,CAQ3B,IAPKA,GAAKrB,GACToB,EAAKC,GACLA,GAAK,IAELD,EAAKpB,EACLqB,IAAMrB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,GAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,GAAKtC,EAAG,GAAIsC,GAAK,GAAK,CAQ3B,IAPKA,GAAKN,GACTG,EAAKG,GACLA,GAAK,IAELH,EAAKH,EACLM,IAAMN,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,GAAGpC,EAAGwC,IAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,EAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMlB,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,EC3PA,SAA0BpC,EAAKL,EAAQH,EAAOY,EAASH,GACtD,IAAI6C,EACAzC,EACAC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAQ,EACAkB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxE,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAvE,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,GACAG,GACAG,GACAU,GACAC,GACAe,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAnC,GACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,GAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,GAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAa5C,IAVAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGTI,EAAM,GACAkD,GAAI,EAAGA,GAAIH,GAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAwBjB,IArBAT,EAAMiB,EAAOX,IACbY,EAAMD,EAAOX,IACbe,EAAMJ,EAAOX,IACbkB,EAAMP,EAAOX,IACbqB,EAAMV,EAAOX,IACbwB,EAAMb,EAAOX,IACb2B,EAAMhB,EAAOX,IACb8B,EAAMnB,EAAOX,IACbiC,EAAMtB,EAAOX,IACbxC,EAAMmD,EAAOX,IACbnC,EAAM8C,EAAOX,IACbhC,EAAM2C,EAAOX,IACb7B,EAAMwC,EAAOX,IACb1B,EAAMqC,EAAOX,IACbvB,EAAMkC,EAAOX,IACbpB,EAAM+B,EAAOX,IACbjB,EAAM4B,EAAOX,IACbd,EAAMyB,EAAOX,IACb7C,EAAKwD,EAAOX,IAGNmC,GAAK1E,EAAG,GAAI0E,GAAK,GAAK,CAQ3B,IAPKA,GAAK1C,GACTyC,EAAKC,GACLA,GAAK,IAELD,EAAKzC,EACL0C,IAAM1C,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB8B,EAAK9B,IAAMN,EAAGM,IAAOgC,GAAGxE,EAAGwC,IAAG,GAE/B,IAAM6B,GAAKvE,EAAG,GAAIuE,GAAK,GAAK,CAQ3B,IAPKA,GAAKvC,GACTsC,EAAKC,GACLA,GAAK,IAELD,EAAKtC,EACLuC,IAAMvC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBjB,EAAKiB,IAAMxC,EAAGwC,IAAG,GAAO4B,EAAGpE,EAAGwC,IAAG,GACjC2B,EAAK3B,IAAM8B,EAAI9B,IAAO6B,GAAGrE,EAAGwC,IAAG,GAEhC,IAAM0B,GAAKpE,EAAG,GAAIoE,GAAK,GAAK,CAQ3B,IAPKA,GAAKpC,GACTmC,EAAKC,GACLA,GAAK,IAELD,EAAKnC,EACLoC,IAAMpC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBpB,EAAKoB,IAAMxC,EAAGwC,IAAG,GAAOyB,EAAGjE,EAAGwC,IAAG,GACjCwB,EAAKxB,IAAM2B,EAAI3B,IAAO0B,GAAGlE,EAAGwC,IAAG,GAEhC,IAAMuB,GAAKjE,EAAG,GAAIiE,GAAK,GAAK,CAQ3B,IAPKA,GAAKjC,GACTgC,EAAKC,GACLA,GAAK,IAELD,EAAKhC,EACLiC,IAAMjC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBvB,EAAKuB,IAAMxC,EAAGwC,IAAG,GAAOsB,EAAG9D,EAAGwC,IAAG,GACjCqB,EAAKrB,IAAMwB,EAAIxB,IAAOuB,GAAG/D,EAAGwC,IAAG,GAEhC,IAAMoB,GAAK9D,EAAG,GAAI8D,GAAK,GAAK,CAQ3B,IAPKA,GAAK9B,GACT6B,EAAKC,GACLA,GAAK,IAELD,EAAK7B,EACL8B,IAAM9B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,GAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,GAAK3D,EAAG,GAAI2D,GAAK,GAAK,CAQ3B,IAPKA,GAAK3B,GACT0B,EAAKC,GACLA,GAAK,IAELD,EAAK1B,EACL2B,IAAM3B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,GAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,GAAKxD,EAAG,GAAIwD,GAAK,GAAK,CAQ3B,IAPKA,GAAKxB,GACTuB,EAAKC,GACLA,GAAK,IAELD,EAAKvB,EACLwB,IAAMxB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,GAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,GAAKrD,EAAG,GAAIqD,GAAK,GAAK,CAQ3B,IAPKA,GAAKrB,GACToB,EAAKC,GACLA,GAAK,IAELD,EAAKpB,EACLqB,IAAMrB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,GAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,GAAKtC,EAAG,GAAIsC,GAAK,GAAK,CAQ3B,IAPKA,GAAKN,GACTG,EAAKG,GACLA,GAAK,IAELH,EAAKH,EACLM,IAAMN,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,GAAGpC,EAAGwC,IAAG,GAEhC,IAAML,GAAKrC,EAAG,GAAIqC,GAAK,GAAK,CAS3B,IARKA,GAAKL,GACTE,EAAKG,GACLA,GAAK,IAELH,EAAKF,EACLK,IAAML,GAGDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,GAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMf,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBH,EAAMG,EAAG,IAAOR,EAAKR,EAAOS,GAC5Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACDlD,EAAkBsB,EAAI+B,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,G/BzQIkD,EAAyB,CgCP7B,SAAyBzF,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAkC,EACAjC,EACAkC,EACAC,EACAjC,EACAkC,EACA1C,EACAC,EACAQ,EACAkC,EACAC,EACAC,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAU,GAGlBrC,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAQjB,IALAT,EAAMiB,EAAOX,GACbxC,EAAMmD,EAAOX,GACb7C,EAAKwD,EAAOX,GAGND,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBT,EAAKS,GAAMN,EAAGM,GAAOJ,EAAGpC,EAAGwC,GAAG,GAE/B,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAMvC,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD,CACD,CACF,EC5FA,SAAyBb,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACA6B,EACAkB,EACAnD,EACAkC,EACAC,EACAiB,EACAlD,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACA+B,EACAC,EACAe,EACAd,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAU,GAGlBrC,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAUjB,IAPAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNc,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBS,EAAKT,GAAMN,EAAGM,GAAOW,EAAGnD,EAAGwC,GAAG,GAE/B,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAC/BtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GAElC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAMpC,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACD,CACD,CACD,CACF,ECrHA,SAAyBlB,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACA0B,EACAkB,EACAG,EACAtD,EACAkC,EACAC,EACAiB,EACAG,EACArD,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACA4B,EACAC,EACAe,EACAG,EACAjB,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAU,GAGlBrC,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAYjB,IATAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNiB,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBY,EAAKZ,GAAMN,EAAGM,GAAOc,EAAGtD,EAAGwC,GAAG,GAE/B,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBS,EAAKT,GAAMY,EAAIZ,GAAOW,EAAGnD,EAAGwC,GAAG,GAC/BnC,EAAKmC,GAAMxC,EAAGwC,GAAG,GAAOU,EAAGlD,EAAGwC,GAAG,GAElC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAC/BtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GAElC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAMjC,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACD,CACD,CACD,CACD,CACF,EC5IA,SAAyBrB,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAuB,EACAkB,EACAG,EACAG,EACAzD,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAxD,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAyB,EACAC,EACAe,EACAG,EACAG,EACApB,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAU,GAGlBrC,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAcjB,IAXAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbkB,EAAMP,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7B,EAAMwC,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNoB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBe,EAAKf,GAAMN,EAAGM,GAAOiB,EAAGzD,EAAGwC,GAAG,GAE/B,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhC,EAAKgC,GAAMxC,EAAGwC,GAAG,GAAOa,EAAGrD,EAAGwC,GAAG,GACjCY,EAAKZ,GAAMe,EAAIf,GAAOc,EAAGtD,EAAGwC,GAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBnC,EAAKmC,GAAMxC,EAAGwC,GAAG,GAAOU,EAAGlD,EAAGwC,GAAG,GACjCS,EAAKT,GAAMY,EAAIZ,GAAOW,EAAGnD,EAAGwC,GAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GACjCT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAM9B,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACD,CACD,CACD,CACD,CACD,CACF,ECnKA,SAAyBxB,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAoB,EACAkB,EACAG,EACAG,EACAG,EACA5D,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACA3D,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAsB,EACAC,EACAe,EACAG,EACAG,EACAG,EACAvB,EACAC,EACA5C,EACA6C,EACAC,EAYJ,IARAH,EAAI1D,EAAOL,OACXgE,EAAI3D,EAAQ,GACZe,EAAIf,EAAQ,GAIZmB,GADAyC,EAAIE,EAAW/C,EAAEC,MAAOP,EAASM,EAAEN,UAC5BU,GACPE,EAAK,CAAEuC,EAAEG,GAAIH,EAAEI,IACTH,EAAI,EAAGA,EAAIH,EAAGG,IACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,GAAGpD,QAASmD,EAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,EAAES,MAAOrD,EAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAU,GAGlBrC,EAAM,GACAkD,EAAI,EAAGA,EAAIH,EAAGG,IACnBlD,EAAIT,KAAMmB,EAAGwC,GAAG,IAgBjB,IAbAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbkB,EAAMP,EAAOX,GACbqB,EAAMV,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7B,EAAMwC,EAAOX,GACb1B,EAAMqC,EAAOX,GACb7C,EAAKwD,EAAOX,GAGNuB,EAAK9D,EAAG,GAAI8D,EAAK,GAAK,CAQ3B,IAPKA,EAAK9B,GACT6B,EAAKC,EACLA,EAAK,IAELD,EAAK7B,EACL8B,GAAM9B,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBkB,EAAKlB,GAAMN,EAAGM,GAAOoB,EAAG5D,EAAGwC,GAAG,GAE/B,IAAMiB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnB7B,EAAK6B,GAAMxC,EAAGwC,GAAG,GAAOgB,EAAGxD,EAAGwC,GAAG,GACjCe,EAAKf,GAAMkB,EAAIlB,GAAOiB,EAAGzD,EAAGwC,GAAG,GAEhC,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhC,EAAKgC,GAAMxC,EAAGwC,GAAG,GAAOa,EAAGrD,EAAGwC,GAAG,GACjCY,EAAKZ,GAAMe,EAAIf,GAAOc,EAAGtD,EAAGwC,GAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBnC,EAAKmC,GAAMxC,EAAGwC,GAAG,GAAOU,EAAGlD,EAAGwC,GAAG,GACjCS,EAAKT,GAAMY,EAAIZ,GAAOW,EAAGnD,EAAGwC,GAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBtC,EAAKsC,GAAMxC,EAAGwC,GAAG,GAAOP,EAAGjC,EAAGwC,GAAG,GACjCT,EAAKS,GAAMS,EAAIT,GAAOJ,EAAGpC,EAAGwC,GAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,EAAI,EAAGA,EAAIH,EAAGG,IACnBhD,EAAIgD,GAAMT,EAAIS,GAAOL,EAAGnC,EAAGwC,GAAG,GAC9B3C,EAAK2C,GAAMxC,EAAGwC,GAAG,GAAOR,EAAGhC,EAAGwC,GAAG,GAGlC,IAAM3B,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAG,GAAIR,EAAKR,EAAOS,IAC9Bf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACF,EC1LA,SAAyB3B,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAiB,EACAkB,EACAG,EACAG,EACAG,EACAG,EACA/D,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACA9D,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAmB,EACAC,EACAe,EACAG,EACAG,EACAG,EACAG,EACA1B,EACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,EAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,EAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGT0C,EAAMlC,GAAEiC,UAAW,GAGnBrC,EAAM,GACAkD,GAAI,EAAGA,GAAIH,EAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAkBjB,IAfAT,EAAMiB,EAAOX,GACbY,EAAMD,EAAOX,GACbe,EAAMJ,EAAOX,GACbkB,EAAMP,EAAOX,GACbqB,EAAMV,EAAOX,GACbwB,EAAMb,EAAOX,GACbxC,EAAMmD,EAAOX,GACbnC,EAAM8C,EAAOX,GACbhC,EAAM2C,EAAOX,GACb7B,EAAMwC,EAAOX,GACb1B,EAAMqC,EAAOX,GACbvB,EAAMkC,EAAOX,GACb7C,EAAKwD,EAAOX,GAGN0B,EAAKjE,EAAG,GAAIiE,EAAK,GAAK,CAQ3B,IAPKA,EAAKjC,GACTgC,EAAKC,EACLA,EAAK,IAELD,EAAKhC,EACLiC,GAAMjC,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBqB,EAAKrB,IAAMN,EAAGM,IAAOuB,EAAG/D,EAAGwC,IAAG,GAE/B,IAAMoB,EAAK9D,EAAG,GAAI8D,EAAK,GAAK,CAQ3B,IAPKA,EAAK9B,GACT6B,EAAKC,EACLA,EAAK,IAELD,EAAK7B,EACL8B,GAAM9B,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,EAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,EAAK3D,EAAG,GAAI2D,EAAK,GAAK,CAQ3B,IAPKA,EAAK3B,GACT0B,EAAKC,EACLA,EAAK,IAELD,EAAK1B,EACL2B,GAAM3B,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,EAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,EAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,EAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,EAAGpC,EAAGwC,IAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,GAAI,EAAGA,GAAIH,EAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,EAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMxB,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,ECjNA,SAAyB9B,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAc,EACAkB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAlE,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAjE,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAgB,EACAC,EACAe,EACAG,EACAG,GACAG,GACAG,GACAG,GACA7B,GACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,GAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,GAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGT0C,EAAMlC,GAAEiC,UAAW,GAGnBrC,EAAM,GACAkD,GAAI,EAAGA,GAAIH,GAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAoBjB,IAjBAT,EAAMiB,EAAOX,IACbY,EAAMD,EAAOX,IACbe,EAAMJ,EAAOX,IACbkB,EAAMP,EAAOX,IACbqB,EAAMV,EAAOX,IACbwB,EAAMb,EAAOX,IACb2B,EAAMhB,EAAOX,IACbxC,EAAMmD,EAAOX,IACbnC,EAAM8C,EAAOX,IACbhC,EAAM2C,EAAOX,IACb7B,EAAMwC,EAAOX,IACb1B,EAAMqC,EAAOX,IACbvB,EAAMkC,EAAOX,IACbpB,EAAM+B,EAAOX,IACb7C,EAAKwD,EAAOX,IAGN6B,GAAKpE,EAAG,GAAIoE,GAAK,GAAK,CAQ3B,IAPKA,GAAKpC,GACTmC,EAAKC,GACLA,GAAK,IAELD,EAAKnC,EACLoC,IAAMpC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBwB,EAAKxB,IAAMN,EAAGM,IAAO0B,GAAGlE,EAAGwC,IAAG,GAE/B,IAAMuB,GAAKjE,EAAG,GAAIiE,GAAK,GAAK,CAQ3B,IAPKA,GAAKjC,GACTgC,EAAKC,GACLA,GAAK,IAELD,EAAKhC,EACLiC,IAAMjC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBvB,EAAKuB,IAAMxC,EAAGwC,IAAG,GAAOsB,EAAG9D,EAAGwC,IAAG,GACjCqB,EAAKrB,IAAMwB,EAAIxB,IAAOuB,GAAG/D,EAAGwC,IAAG,GAEhC,IAAMoB,GAAK9D,EAAG,GAAI8D,GAAK,GAAK,CAQ3B,IAPKA,GAAK9B,GACT6B,EAAKC,GACLA,GAAK,IAELD,EAAK7B,EACL8B,IAAM9B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,GAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,GAAK3D,EAAG,GAAI2D,GAAK,GAAK,CAQ3B,IAPKA,GAAK3B,GACT0B,EAAKC,GACLA,GAAK,IAELD,EAAK1B,EACL2B,IAAM3B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,GAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,EAAKxD,EAAG,GAAIwD,EAAK,GAAK,CAQ3B,IAPKA,EAAKxB,GACTuB,EAAKC,EACLA,EAAK,IAELD,EAAKvB,EACLwB,GAAMxB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,EAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,EAAKrD,EAAG,GAAIqD,EAAK,GAAK,CAQ3B,IAPKA,EAAKrB,GACToB,EAAKC,EACLA,EAAK,IAELD,EAAKpB,EACLqB,GAAMrB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,EAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,EAAKtC,EAAG,GAAIsC,EAAK,GAAK,CAQ3B,IAPKA,EAAKN,GACTG,EAAKG,EACLA,EAAK,IAELH,EAAKH,EACLM,GAAMN,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,EAAGpC,EAAGwC,IAAG,GAEhC,IAAML,EAAKrC,EAAG,GAAIqC,EAAK,GAAK,CAS3B,IARKA,EAAKL,GACTE,EAAKG,EACLA,EAAK,IAELH,EAAKF,EACLK,GAAML,GAGDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,EAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMrB,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,ECxOA,SAAyBjC,EAAKL,EAAQH,EAAOY,EAASH,GACrD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAW,EACAkB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACArE,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACApE,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAa,GACAC,GACAe,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAhC,GACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,GAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,GAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGT0C,EAAMlC,GAAEiC,UAAW,GAGnBrC,EAAM,GACAkD,GAAI,EAAGA,GAAIH,GAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAsBjB,IAnBAT,EAAMiB,EAAOX,IACbY,EAAMD,EAAOX,IACbe,EAAMJ,EAAOX,IACbkB,EAAMP,EAAOX,IACbqB,EAAMV,EAAOX,IACbwB,EAAMb,EAAOX,IACb2B,EAAMhB,EAAOX,IACb8B,EAAMnB,EAAOX,IACbxC,EAAMmD,EAAOX,IACbnC,EAAM8C,EAAOX,IACbhC,EAAM2C,EAAOX,IACb7B,EAAMwC,EAAOX,IACb1B,EAAMqC,EAAOX,IACbvB,EAAMkC,EAAOX,IACbpB,EAAM+B,EAAOX,IACbjB,EAAM4B,EAAOX,IACb7C,EAAKwD,EAAOX,IAGNgC,GAAKvE,EAAG,GAAIuE,GAAK,GAAK,CAQ3B,IAPKA,GAAKvC,GACTsC,EAAKC,GACLA,GAAK,IAELD,EAAKtC,EACLuC,IAAMvC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB2B,EAAK3B,IAAMN,EAAGM,IAAO6B,GAAGrE,EAAGwC,IAAG,GAE/B,IAAM0B,GAAKpE,EAAG,GAAIoE,GAAK,GAAK,CAQ3B,IAPKA,GAAKpC,GACTmC,EAAKC,GACLA,GAAK,IAELD,EAAKnC,EACLoC,IAAMpC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBpB,EAAKoB,IAAMxC,EAAGwC,IAAG,GAAOyB,EAAGjE,EAAGwC,IAAG,GACjCwB,EAAKxB,IAAM2B,EAAI3B,IAAO0B,GAAGlE,EAAGwC,IAAG,GAEhC,IAAMuB,GAAKjE,EAAG,GAAIiE,GAAK,GAAK,CAQ3B,IAPKA,GAAKjC,GACTgC,EAAKC,GACLA,GAAK,IAELD,EAAKhC,EACLiC,IAAMjC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBvB,EAAKuB,IAAMxC,EAAGwC,IAAG,GAAOsB,EAAG9D,EAAGwC,IAAG,GACjCqB,EAAKrB,IAAMwB,EAAIxB,IAAOuB,GAAG/D,EAAGwC,IAAG,GAEhC,IAAMoB,GAAK9D,EAAG,GAAI8D,GAAK,GAAK,CAQ3B,IAPKA,GAAK9B,GACT6B,EAAKC,GACLA,GAAK,IAELD,EAAK7B,EACL8B,IAAM9B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,GAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,GAAK3D,EAAG,GAAI2D,GAAK,GAAK,CAQ3B,IAPKA,GAAK3B,GACT0B,EAAKC,GACLA,GAAK,IAELD,EAAK1B,EACL2B,IAAM3B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,GAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,GAAKxD,EAAG,GAAIwD,GAAK,GAAK,CAQ3B,IAPKA,GAAKxB,GACTuB,EAAKC,GACLA,GAAK,IAELD,EAAKvB,EACLwB,IAAMxB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,GAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,GAAKrD,EAAG,GAAIqD,GAAK,GAAK,CAQ3B,IAPKA,GAAKrB,GACToB,EAAKC,GACLA,GAAK,IAELD,EAAKpB,EACLqB,IAAMrB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,GAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,GAAKtC,EAAG,GAAIsC,GAAK,GAAK,CAQ3B,IAPKA,GAAKN,GACTG,EAAKG,GACLA,GAAK,IAELH,EAAKH,EACLM,IAAMN,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,GAAGpC,EAAGwC,IAAG,GAEhC,IAAML,GAAKrC,EAAG,GAAIqC,GAAK,GAAK,CAS3B,IARKA,GAAKL,GACTE,EAAKG,GACLA,GAAK,IAELH,EAAKF,EACLK,IAAML,GAGDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,GAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMlB,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,EC/PA,SAA0BpC,EAAKL,EAAQH,EAAOY,EAASH,GACtD,IAAI6C,EACAzC,EACAuC,EACAtC,EACAO,EACAK,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAQ,EACAkB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAxE,EACAkC,EACAC,EACAiB,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAG,EACAvE,EACAkC,EACA1C,EACAC,EACAQ,EACAG,EACAG,EACAG,EACAG,EACAG,GACAG,GACAG,GACAG,GACAU,GACAC,GACAe,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAG,GACAnC,GACAC,GACA5C,GACA6C,GACAC,GAYJ,IARAH,GAAI1D,EAAOL,OACXgE,GAAI3D,EAAQ,GACZe,GAAIf,EAAQ,GAIZmB,GADAyC,GAAIE,EAAW/C,GAAEC,MAAOP,EAASM,GAAEN,UAC5BU,GACPE,EAAK,CAAEuC,GAAEG,GAAIH,GAAEI,IACTH,GAAI,EAAGA,GAAIH,GAAGG,KACnBxC,EAAGnB,KAAM+D,EAAajE,EAAO6D,IAAGpD,QAASmD,GAAEM,MAgB5C,IAbAf,EAAQgB,EAAWR,GAAES,MAAOrD,GAAEqD,OAG9Bb,EAAK/D,EAASQ,GAGdU,EAAOK,GAAER,KAGT0C,EAAMlC,GAAEiC,UAAW,GAGnBrC,EAAM,GACAkD,GAAI,EAAGA,GAAIH,GAAGG,KACnBlD,EAAIT,KAAMmB,EAAGwC,IAAG,IAwBjB,IArBAT,EAAMiB,EAAOX,IACbY,EAAMD,EAAOX,IACbe,EAAMJ,EAAOX,IACbkB,EAAMP,EAAOX,IACbqB,EAAMV,EAAOX,IACbwB,EAAMb,EAAOX,IACb2B,EAAMhB,EAAOX,IACb8B,EAAMnB,EAAOX,IACbiC,EAAMtB,EAAOX,IACbxC,EAAMmD,EAAOX,IACbnC,EAAM8C,EAAOX,IACbhC,EAAM2C,EAAOX,IACb7B,EAAMwC,EAAOX,IACb1B,EAAMqC,EAAOX,IACbvB,EAAMkC,EAAOX,IACbpB,EAAM+B,EAAOX,IACbjB,EAAM4B,EAAOX,IACbd,EAAMyB,EAAOX,IACb7C,EAAKwD,EAAOX,IAGNmC,GAAK1E,EAAG,GAAI0E,GAAK,GAAK,CAQ3B,IAPKA,GAAK1C,GACTyC,EAAKC,GACLA,GAAK,IAELD,EAAKzC,EACL0C,IAAM1C,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB8B,EAAK9B,IAAMN,EAAGM,IAAOgC,GAAGxE,EAAGwC,IAAG,GAE/B,IAAM6B,GAAKvE,EAAG,GAAIuE,GAAK,GAAK,CAQ3B,IAPKA,GAAKvC,GACTsC,EAAKC,GACLA,GAAK,IAELD,EAAKtC,EACLuC,IAAMvC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBjB,EAAKiB,IAAMxC,EAAGwC,IAAG,GAAO4B,EAAGpE,EAAGwC,IAAG,GACjC2B,EAAK3B,IAAM8B,EAAI9B,IAAO6B,GAAGrE,EAAGwC,IAAG,GAEhC,IAAM0B,GAAKpE,EAAG,GAAIoE,GAAK,GAAK,CAQ3B,IAPKA,GAAKpC,GACTmC,EAAKC,GACLA,GAAK,IAELD,EAAKnC,EACLoC,IAAMpC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBpB,EAAKoB,IAAMxC,EAAGwC,IAAG,GAAOyB,EAAGjE,EAAGwC,IAAG,GACjCwB,EAAKxB,IAAM2B,EAAI3B,IAAO0B,GAAGlE,EAAGwC,IAAG,GAEhC,IAAMuB,GAAKjE,EAAG,GAAIiE,GAAK,GAAK,CAQ3B,IAPKA,GAAKjC,GACTgC,EAAKC,GACLA,GAAK,IAELD,EAAKhC,EACLiC,IAAMjC,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBvB,EAAKuB,IAAMxC,EAAGwC,IAAG,GAAOsB,EAAG9D,EAAGwC,IAAG,GACjCqB,EAAKrB,IAAMwB,EAAIxB,IAAOuB,GAAG/D,EAAGwC,IAAG,GAEhC,IAAMoB,GAAK9D,EAAG,GAAI8D,GAAK,GAAK,CAQ3B,IAPKA,GAAK9B,GACT6B,EAAKC,GACLA,GAAK,IAELD,EAAK7B,EACL8B,IAAM9B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB1B,EAAK0B,IAAMxC,EAAGwC,IAAG,GAAOmB,EAAG3D,EAAGwC,IAAG,GACjCkB,EAAKlB,IAAMqB,EAAIrB,IAAOoB,GAAG5D,EAAGwC,IAAG,GAEhC,IAAMiB,GAAK3D,EAAG,GAAI2D,GAAK,GAAK,CAQ3B,IAPKA,GAAK3B,GACT0B,EAAKC,GACLA,GAAK,IAELD,EAAK1B,EACL2B,IAAM3B,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnB7B,EAAK6B,IAAMxC,EAAGwC,IAAG,GAAOgB,EAAGxD,EAAGwC,IAAG,GACjCe,EAAKf,IAAMkB,EAAIlB,IAAOiB,GAAGzD,EAAGwC,IAAG,GAEhC,IAAMc,GAAKxD,EAAG,GAAIwD,GAAK,GAAK,CAQ3B,IAPKA,GAAKxB,GACTuB,EAAKC,GACLA,GAAK,IAELD,EAAKvB,EACLwB,IAAMxB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhC,EAAKgC,IAAMxC,EAAGwC,IAAG,GAAOa,EAAGrD,EAAGwC,IAAG,GACjCY,EAAKZ,IAAMe,EAAIf,IAAOc,GAAGtD,EAAGwC,IAAG,GAEhC,IAAMW,GAAKrD,EAAG,GAAIqD,GAAK,GAAK,CAQ3B,IAPKA,GAAKrB,GACToB,EAAKC,GACLA,GAAK,IAELD,EAAKpB,EACLqB,IAAMrB,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBnC,EAAKmC,IAAMxC,EAAGwC,IAAG,GAAOU,EAAGlD,EAAGwC,IAAG,GACjCS,EAAKT,IAAMY,EAAIZ,IAAOW,GAAGnD,EAAGwC,IAAG,GAEhC,IAAMJ,GAAKtC,EAAG,GAAIsC,GAAK,GAAK,CAQ3B,IAPKA,GAAKN,GACTG,EAAKG,GACLA,GAAK,IAELH,EAAKH,EACLM,IAAMN,GAEDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBtC,EAAKsC,IAAMxC,EAAGwC,IAAG,GAAOP,EAAGjC,EAAGwC,IAAG,GACjCT,EAAKS,IAAMS,EAAIT,IAAOJ,GAAGpC,EAAGwC,IAAG,GAEhC,IAAML,GAAKrC,EAAG,GAAIqC,GAAK,GAAK,CAS3B,IARKA,GAAKL,GACTE,EAAKG,GACLA,GAAK,IAELH,EAAKF,EACLK,IAAML,GAGDU,GAAI,EAAGA,GAAIH,GAAGG,KACnBhD,EAAIgD,IAAMT,EAAIS,IAAOL,GAAGnC,EAAGwC,IAAG,GAC9B3C,EAAK2C,IAAMxC,EAAGwC,IAAG,GAAOR,EAAGhC,EAAGwC,IAAG,GAGlC,IAAMf,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,GAAK,EAAGA,GAAK8C,EAAI9C,KAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAK8C,EAAI9C,IAAO,CAC7B,IAAMH,EAAK,EAAGA,EAAKgC,EAAIhC,IAAO,CAC7B,IAAMR,EAAK,EAAGA,EAAKuC,EAAIvC,IACtBlB,EAAgBC,EAAOgB,GACvBoC,EAAKvC,EAAMG,EAAI,GAAKR,EAAKR,EAAOS,IAChCf,EAAkBsB,EAAIF,GAEvBpB,EAAkBsB,EAAIK,EACtB,CACD3B,EAAkBsB,EAAIU,EACtB,CACDhC,EAAkBsB,EAAIa,EACtB,CACDnC,EAAkBsB,EAAIgB,EACtB,CACDtC,EAAkBsB,EAAImB,EACtB,CACDzC,EAAkBsB,EAAIsB,EACtB,CACD5C,EAAkBsB,EAAIyB,EACtB,CACD/C,EAAkBsB,EAAI4B,EACtB,CACDlD,EAAkBsB,EAAI+B,EACtB,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACD,CACF,GxCtQImD,EAAW3F,EAAMT,OAAS,EAmK9B,SAASqG,EAAqB3F,EAAKL,EAAQiG,EAAMC,GAChD,IAAIrG,EACAsG,EACAC,EACA9F,EACA+F,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/C,EACAgD,EACAC,EACAC,EACAxD,EACAyD,EACAC,EACAzD,EACA5C,EACArB,EACAI,EAUJ,IAPCQ,EADI+G,UAAU1H,OAAS,EAChBuG,EAEA,CAAA,EAGRxC,EAAI1D,EAAOL,OACX0G,EAAM,GACA3G,EAAI,EAAGA,EAAIgE,EAAGhE,IACnB2G,EAAInG,KAAMoH,EAAgBtH,EAAQN,KAanC,GAVAiE,EAAI0C,EAAK,GACTtF,EAAIsF,EAAK,GAITF,GADAK,EAAM7C,EAAE3C,OACIrB,OAGZwH,EAAIlB,EAAKtG,OAEE,QADXsH,EAAIM,EAAkBtB,EAAME,EAAM,IAEjC,MAAM,IAAIqB,WAAYC,EAAQ,2FAA4FC,EAAMzB,EAAM,OAGvI,GADAgB,EAAEU,OACGV,EAAEtH,SAAWwH,EACjB,MAAM,IAAIS,MAAOH,EAAQ,iGAAkGC,EAAMzB,EAAM,OAGxI,GAAKkB,EAAIhB,EACR,MAAM,IAAIqB,WAAYC,EAAQ,qJAAsJtB,EAAOuB,EAAMzB,EAAM,OAIxM,IADAmB,EAAIjB,EAAQgB,EACNzH,EAAI,EAAGA,EAAIgE,EAAGhE,IACnB,GAAK2G,EAAK3G,GAAIsB,MAAMrB,SAAWyH,EAC9B,MAAM,IAAIQ,MAAOH,EAAQ,0MAA2MC,EAAMlB,EAAK,KAAOY,EAAGM,EAAMrB,EAAK3G,GAAIsB,MAAO,KAAOtB,IAIxR,GAAW,IAAN0H,EACJ,OAAKrG,EAAE8G,iBACC9E,EAAgBqE,GAAK/G,EAAKgG,EAAK/F,GAEhCF,EAAOgH,GAAK/G,EAAKgG,EAAK/F,GAgB9B,IAbA8F,EAAQ0B,EAAmBtB,EAAI7G,OAAQsH,GAEvCP,GADAJ,EAAMyB,EAAcvB,EAAK7C,EAAElD,QAAS2F,IACzB,GACXW,EAAKT,EAAK,GAIVG,GADAH,EAAMyB,EAAcvB,EAAK7C,EAAElD,QAASwG,IACzB,GACXH,EAAKR,EAAK,GAGVC,EAAM,EACNS,EAAK,EACCtH,EAAI,EAAGA,EAAI0H,EAAG1H,IAAM,CAEzB,IADAwH,EAAIR,EAAKhH,GACHI,EAAI,EAAGA,EAAI4D,EAAG5D,IACnB,GAAKoH,IAAMb,EAAKvG,GAAIkB,MAAOtB,GAC1B,MAAM,IAAIkI,MAAOH,EAAQ,qNAAsNC,EAAMlB,EAAK,KAAOkB,EAAMtB,EAAO,KAAOsB,EAAMhB,EAAK,KAAOgB,EAAMrB,EAAKvG,GAAIkB,MAAO,KAAOlB,IAItUyG,GAAOW,EAGI,IAANA,IACJF,GAAM,EAEP,CAED,KAAa,IAART,GAAeE,EAAI9G,QAA2B,IAAjBqI,EAAOvB,IAAzC,CAiBA,GyCxXD,SAA0BzG,EAAQC,GACjC,IAAIgI,EACAvI,EAEJ,IAAMA,EAAI,EAAGA,EAAIM,EAAOL,OAAQD,IAC/BuI,EAAIjI,EAAQN,GACZO,EAAIC,KAAK,CACRkE,MAAS6D,EAAE7D,MACX7D,KAAQ0H,EAAE1H,KACVS,MAAS,GACTP,QAAW,CAAE,GACbV,OAAUkI,EAAElI,OACZmI,MAASD,EAAEC,OAId,CzCqWCC,CAAiB9B,EAVjBxG,EAAQ,CACP,CACCuE,MAAST,EAAES,MACX7D,KAAQoD,EAAEpD,KACVS,MAASyF,EACThG,QAAWqG,EACX/G,OAAU4D,EAAE5D,OACZmI,MAASvE,EAAEuE,SAMF,IAANd,EACJ,OAAKrG,EAAE8G,iBACC9E,EAAgBqE,GAAK/G,EAAKgG,EAAKxG,EAAOkH,EAAIzG,GAE3CF,EAAOgH,GAAK/G,EAAKgG,EAAKxG,EAAOkH,EAAIzG,GAKzC,GAHA0D,EAAKjD,EAAEN,QAGFuG,IAAOI,EAAE,EAAI,CAEjB,IAAM1H,EAAI,EAAGA,EAAI0H,GACE,IAAbV,EAAKhH,GADSA,KAMpB,IADAqB,EAAEC,MAAQ,CAAE0F,EAAIhH,IACVI,EAAI,EAAGA,EAAI4D,EAAG5D,IACnBuG,EAAKvG,GAAIW,QAAU,CAAE4F,EAAIvG,GAAGW,QAAQf,IAGrC,OADAqH,EAAK,CAAEA,EAAGrH,IACLqB,EAAE8G,iBACC9E,EAAgB,GAAK1C,EAAKgG,EAAKxG,EAAOkH,EAAIzG,GAE3CF,EAAO,GAAKC,EAAKgG,EAAKxG,EAAOkH,EAAIzG,EACxC,CAMD,OALAqG,EAAMyB,EAAgBrB,GACtBH,EAAMwB,EAAgBpE,GAGtB6C,EAAMwB,EAAetB,GACR,IAARJ,GAAqB,IAARC,GAAaC,IAAQwB,EAAerE,IAAQoD,GAAKrB,EAE7DhF,EAAE8G,iBACC9E,EAAgBqE,GAAK/G,EAAKgG,EAAKxG,EAAOkH,EAAY,IAARF,EAAWvG,GAEtDF,EAAOgH,GAAK/G,EAAKgG,EAAKxG,EAAOkH,EAAY,IAARF,EAAWvG,GAK/C8G,GAAKrB,EACJhF,EAAE8G,iBACC/B,EAAwBsB,EAAE,GAAK/G,EAAKgG,EAAKxG,EAAOkH,EAAIzG,GAErD4C,EAAekE,EAAE,GAAK/G,EAAKgG,EAAKxG,EAAOkH,EAAIzG,GAG9CS,EAAE8G,iBF5VR,SAAkBxH,EAAKL,EAAQH,EAAOY,EAASH,GAC9C,IAAII,EACA6F,EACAtD,EACA9B,EACAN,EACAyH,EACA5E,EACAuE,EACAlH,EACArB,EACAI,EAsBJ,IApBA4D,EAAI1D,EAAOL,OAIXwB,GADAJ,EAAIf,EAAQ,IACLgB,MAGPuF,EAAMyB,EAAO7G,GAGbN,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT0C,EAAMlC,EAAEiC,UAAW,GAGnBsF,EAAKjE,EAAOX,GACNhE,EAAI,EAAGA,EAAI6G,EAAK7G,IAAM,CAC3B,IAAMI,EAAI,EAAGA,EAAI4D,EAAG5D,IACnBmI,EAAIjI,EAAQF,GACZwI,EAAIxI,GAAMyI,EAAWpH,EAAI8G,EAAExH,QAASI,EAAIf,GAAKmI,EAAEC,MAAOxI,EAAGS,GAE1DP,EAAgBC,EAAOyI,GACvBrF,EAAKvC,EAAM4H,EAAG,GAAIjI,EAAKR,EAAOS,GAC9B,CACF,CEoTSkI,CAAiBnI,EAAKgG,EAAKxG,EAAOkH,EAAIzG,QDjW/C,SAAkBD,EAAKL,EAAQH,EAAOY,EAASH,GAC9C,IAAII,EACA6F,EACApF,EACAN,EACAyH,EACA5E,EACAuE,EACAlH,EACArB,EACAI,EAmBJ,IAjBA4D,EAAI1D,EAAOL,OAIXwB,GADAJ,EAAIf,EAAQ,IACLgB,MAGPuF,EAAMyB,EAAO7G,GAGbN,EAAKrB,EAASQ,GAGdU,EAAOK,EAAER,KAGT+H,EAAKjE,EAAOX,GACNhE,EAAI,EAAGA,EAAI6G,EAAK7G,IAAM,CAC3B,IAAMI,EAAI,EAAGA,EAAI4D,EAAG5D,IACnBmI,EAAIjI,EAAQF,GACZwI,EAAIxI,GAAMyI,EAAWpH,EAAI8G,EAAExH,QAASI,EAAIf,GAAKmI,EAAEC,MAAOxI,EAAGS,GAE1DP,EAAgBC,EAAOyI,GACvB5H,EAAM4H,EAAG,IAAOjI,EAAKR,EAAOS,EAC5B,CACF,CC8TCmI,CAASpI,EAAKgG,EAAKxG,EAAOkH,EAAIzG,EAlE7B,CAmEF,C0CvXA,SAASoI,EAASrI,GACjB,IAAMsI,EAAYtI,GACjB,MAAM,IAAIuI,UAAWnB,EAAQ,SAAUpH,IAExC,OAWA,SAAkBL,EAAQiG,EAAMC,GAC/B,IAAI5F,EAEHA,EADI+G,UAAU1H,OAAS,EAChBuG,EAEA,CAAA,EAER,OAAO2C,EAAQxI,EAAKL,EAAQiG,EAAM3F,EAClC,CACF,CCyBAwI,EAAAC,EAAA,UAAAL"}